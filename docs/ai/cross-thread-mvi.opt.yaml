```yaml
ctx: Cross-Thread MVI Pattern
type: state-management / multi-thread
scope:
  threads:
    - render thread
    - task thread
  usage: Rotor Framework apps requiring synchronized state across threads
core:
  components:
    Model: "State container extending Model base class; declares initial state. Example: CounterModel with state = { count: 0, lastUpdated: invalid }"
    Reducer: "Transforms state via reducer() and optional applyMiddlewares(). Middleware runs before reducer for async operations."
    Dispatcher: "Bridge exposing createDispatcher, dispatch, getState, addListener. Connects Model and Reducer with thread-safe communication."
  flowDiagram: images/Rotor_Framework_cross-thread_MVI.jpeg
api:
  createDispatcher:
    syntax: "Rotor.createDispatcher(name, model, reducer)"
    description: "Register dispatcher with unique name, model, reducer. Task thread dispatchers are globally accessible. Render thread dispatchers are local-use only."
  dispatch:
    syntax: "dispatcher.dispatch({ type: intentType, payload: data })"
    description: "Send intents from any thread; payload optional. Triggers middleware then reducer."
  getState:
    syntax: "dispatcher.getState(sub(props, state) ... end sub)"
    description: "Callback receives current state snapshot; used for binding props. Executes callback with current state once."
  addListener:
    syntax: "dispatcher.addListener({ mapStateToProps, allowUpdate, callback, once })"
    description: "Subscribe to state changes. mapStateToProps updates props from state. allowUpdate filters when callback fires. callback or callbackWithState executes on update. once removes listener after first trigger."
state:
  renderThread:
    - "dispatch intent to task thread"
    - "listener callbacks receive state updates"
    - "UI update via render/refresh"
  taskThread:
    - "middleware execution (async operations, logging)"
    - "reducer state update (synchronous mutations)"
    - "sync back to listeners on render thread"
examples:
  modelDefinition: |
    class CounterModel extends Model
      state = { count: 0, lastUpdated: invalid }
    end class
  reducerDefinition: |
    class CounterReducer extends Reducer
      override function applyMiddlewares()
        return [
          function(intent, state) ' Logger
            return intent ' pass-through
          end function,
          function(intent, state) ' Async guard
            if intent.type = "LOAD_COUNT"
              return invalid ' halt reducer
            end if
            return intent
          end function
        ]
      end function
      override function reducer(state, intent)
        if intent.type = "INCREMENT"
          state.count = state.count + 1
          state.lastUpdated = createObject("roDateTime").toISOString()
        else if intent.type = "COUNT_LOADED"
          state.count = intent.payload.value
          state.lastUpdated = createObject("roDateTime").toISOString()
        end if
        return state
      end function
    end class
  taskThreadSetup: |
    sub taskFunction()
      counterModel = new Models.CounterModel()
      counterReducer = new Reducers.CounterReducer()
      Rotor.createDispatcher("counter", counterModel, counterReducer)
      m.appFw.sync()
    end sub
  renderThreadUsage: |
    class CounterView extends Rotor.ViewModel
      override sub onCreateView()
        m.dispatcher = m.getDispatcher("counter")
        m.dispatcher.getState(sub(props, state)
          props.count = state.count
        end sub)
        m.dispatcher.addListener({
          mapStateToProps: sub(props, state)
            props.count = state.count
          end sub,
          callback: m.updateCounter
        })
      end sub
      override function template() as object
        return {
          nodeType: "Label",
          id: "counterLabel",
          fields: { text: `Count: ${m.props.count}` }
        }
      end function
      sub updateCounter()
        m.render({ id: "counterLabel", fields: { text: `Count: ${m.props.count}` } })
      end sub
      sub onIncrementPress()
        m.dispatcher.dispatch({ type: "INCREMENT" })
      end sub
    end class
patterns:
  middleware:
    - "Logger middleware demonstrating pass-through. Logs intent then returns intent to continue."
    - "Async guard returning invalid to halt reducer. Perform API call, dispatch COUNT_LOADED when done."
  reducer:
    - "Intent types INCREMENT, COUNT_LOADED mutating count and lastUpdated."
    - "Reducer returns modified state object. All mutations happen in reducer on task thread."
  renderIntegration:
    - "ViewModel onCreateView obtains dispatcher via m.getDispatcher(name)."
    - "getState binds initial state to props."
    - "addListener subscribes to state changes with mapStateToProps."
    - "callback updates UI via m.render on state change."
  dispatcherAccessibility:
    taskThread: "Dispatchers created via Rotor.createDispatcher() on task thread are globally accessible from render thread and other task threads."
    renderThread: "Dispatchers created on render thread are technically accessible but rarely recommended for cross-thread use. Use for complex component internal state or local UI coordination."
resolution:
  priority: "Reducer resolves intents after middleware completes. Listeners react post-update. Middleware can halt reducer by returning invalid."
threadFlow:
  sequence:
    - "Render thread dispatches intent"
    - "Intent sent to task thread"
    - "Middleware chain executes (can halt via invalid)"
    - "Reducer updates state"
    - "State synced back to listeners"
    - "Listener callbacks fire on render thread"
    - "UI updates via render/refresh"
rules:
  - "Create dispatchers in task thread for global access; render-thread dispatchers are local-use only."
  - "All state mutations happen in reducers on task thread. Never mutate state in render thread."
  - "Use middleware for async work; return invalid to stop reducer execution."
  - "Filter listener updates with allowUpdate or once: true to reduce churn and improve performance."
  - "Maintain single source of truth per dispatcher/model pair. Multiple components can subscribe to same dispatcher."
  - "Use clear, descriptive intent types (e.g., 'INCREMENT', 'LOAD_DATA', 'SET_USER')."
  - "Keep models focused on specific domains (e.g., user, content, settings)."
  - "Handle all state mutations in reducer, never in middleware."
pitfalls:
  - "Avoid mutating state directly in render thread. Always dispatch intents."
  - "Render-thread dispatchers should rarely be consumed cross-thread."
  - "Don't perform state mutations in middleware; middleware is for async operations only."
  - "Forgetting to remove listeners can cause memory leaks. Use once: true for one-time operations."
bestPractices:
  - "Keep models focused on specific domains (e.g., user, content, settings)."
  - "Use clear, descriptive intent types."
  - "Filter listener updates with allowUpdate when needed for performance."
  - "Remove listeners with once: true for one-time operations."
  - "Handle all state mutations in the reducer, never in middleware."
lifecycle:
  - "createDispatcher on task thread"
  - "dispatch intent from render thread"
  - "middleware chain execution"
  - "reducer state transformation"
  - "state update committed"
  - "listener notify to render thread"
  - "UI render/refresh"
pipeline:
  - "intent emission (any thread)"
  - "middleware chain (task thread)"
  - "reducer execution (task thread)"
  - "model state commit"
  - "listener callbacks (render thread)"
  - "widget update/render"
```
