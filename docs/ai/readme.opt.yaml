```yaml
ctx: Rotor Framework README
type: project-overview
scope:
  platform: Roku applications built with BrighterScript and SceneGraph
  framework: Rotor ViewBuilder + MVI architecture
  description: "Modular, ViewModel-first UI framework for Roku. Lightweight, speeds up development, simplifies implementation and long-term maintenance. No traditional XML-based views."
core:
  keyFeatures:
    viewBuilderSystem:
      description: "Declarative and extensible view construction"
      features:
        - "Flexible, code-based template system"
        - "Automatic full lifecycle management"
        - "Virtual node tree abstraction"
    mviPattern:
      description: "Roku-friendly MVI design pattern"
      features:
        - "Predictable state management"
        - "Clear separation of concerns"
        - "Cross-thread compatibility"
    componentBasedUI:
      description: "Isolated, reusable UI widgets and view models"
    i18nSupport:
      description: "Locale-aware interface with flexible language resource injection"
    integratedAnimate:
      description: "Integrated Animate library for animations"
      url: "https://github.com/haystacknews/animate"
  sellingPoints:
    - "Faster development time"
    - "Simpler implementation and maintenance"
    - "Reusable components"
    - "State-driven logic"
    - "Optimized rendering for large-scale apps"
    - "No reliance on traditional XML-based views"
installation:
  method: "Shared library for BrighterScript projects"
  prerequisites:
    - "Install BrighterScript v1: npm install --save-dev brighterscript@next @rokucommunity/bslint@next"
  ropmInstall:
    command: "ropm install rotor-framework"
    required: "Must install without prefix by adding to package.json:"
    config: |
      "ropm": {
        "noprefix": ["rotor-framework"]
      }
    note: "Everything is in the Rotor namespace by default, so this is the only name reserved by the framework"
  manualInstall:
    steps:
      - "Download the latest rotor-framework.zip from GitHub Releases: https://github.com/mobalazs/rotor-framework/releases"
      - "Extract the ZIP into your project's source/ directory (this will create a rotor-framework/ folder)"
  import: "import \"pkg:/source/RotorFramework.bs\""
quickStart:
  example: |
    frameworkInstance = new Rotor.Framework()
    frameworkInstance.render([
      {
        id: "helloLabel",
        nodeType: "Label",
        fields: {
          text: "Hello World!",
          color: "#CCCCCC"
        }
      }
    ])
  description: "Minimalist example initializes framework and displays a label. Fully initializes ViewBuilder and demonstrates core rendering capabilities."
requirements:
  platform: "Roku SceneGraph (firmware 10.5+ recommended)"
  language: "BrighterScript V1"
documentation:
  mvi:
    - title: "Cross-Thread MVI design pattern"
      path: "docs/cross-thread-mvi.md"
      description: "State management across threads"
  viewBuilderReference:
    - title: "ViewBuilder Overview"
      path: "docs/view-builder-overview.md"
      description: "High-level architecture and core concepts"
    - title: "Widget Reference"
      path: "docs/view-builder-widget-reference.md"
      description: "Complete Widget properties, methods, and usage patterns"
    - title: "ViewModel Reference"
      path: "docs/view-builder-viewmodel-reference.md"
      description: "Complete ViewModel structure, lifecycle, and state management"
  viewBuilderPlugins:
    - title: "ViewBuilder Fields Plugin"
      path: "docs/view-builder-fields-plugin.md"
      description: "Field management and binding"
    - title: "ViewBuilder FontStyle Plugin"
      path: "docs/view-builder-fontstyle-plugin.md"
      description: "Typography and styling"
    - title: "ViewBuilder Observer Plugin"
      path: "docs/view-builder-observer-plugin.md"
      description: "State observation patterns"
    - title: "ViewBuilder Focus Plugin"
      path: "docs/view-builder-focus-plugin.md"
      description: "Focus management system"
  i18n:
    - title: "Internationalization support"
      path: "docs/i18n-support.md"
      description: "Locale-aware interface implementation"
license: "MIT licensed. See LICENSE file for details."
copyright: "Â© 2025 Rotor Molnar Balazs"
rules:
  - "Adopt ViewBuilder templates for declarative UI construction."
  - "Leverage plugins (Fields, FontStyle, Observer, Focus) to extend widgets."
  - "Use MVI pattern for predictable, cross-thread state updates."
  - "Build UIs in BrightScript without XML."
  - "Use ViewModels for grouping widgets with shared state."
patterns:
  basicUsage: "Initialize Framework, call render() with widget configurations."
  viewModelUsage: "Extend Rotor.ViewModel, implement template() method, use props and viewModelState."
  stateManagement: "Create Model, Reducer, Dispatcher on task thread. Subscribe to state changes in render thread."
  pluginUsage: "Configure plugins in widget definitions. Plugins extend functionality (fields, focus, observer, fonts)."
integrations:
  animateLibrary:
    description: "Integrated Animate library for animations"
    url: "https://github.com/haystacknews/animate"
pipeline:
  - "Explore key features (ViewBuilder, MVI, plugins, i18n)"
  - "Install prerequisites: npm install --save-dev brighterscript@next @rokucommunity/bslint@next"
  - "Install via ROPM: ropm install rotor-framework OR download rotor-framework.zip from GitHub Releases"
  - "Configure noprefix in package.json for ROPM install OR extract ZIP into project's source/ directory for manual install"
  - "Import framework in main file"
  - "Initialize framework instance"
  - "Render widgets using declarative configuration"
  - "Consult docs for architecture, plugins, i18n, MVI patterns"
```
