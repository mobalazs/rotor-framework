'******************************************************************
'*
'* Render Tester Helper
'*
'* DESCRIPTION: Provides a host component wrapper for Rotor.Framework
'*              so Rooibos tests can execute within an active SceneGraph node.
'*
'* ActiveTestNode exists because Rooibos node tests do not run inside an “active host node”.
'* When the suite code instantiated Rotor.Framework directly, all internal observeFieldScoped calls
'* failed with “no active host node” since the framework was created outside of a SceneGraph component.
'* Wrapping Rotor.Framework inside a real component guarantees the code executes in a host context,
'* so observers register correctly and render tracking callbacks fire during tests.
'* The test suites render through this node (created via createChild), keeping host lifecycle intact.
'*
'******************************************************************

import "pkg:/source/rotor/RotorFramework.bs"
import "pkg:/components/tests/ActiveTestNode_const.bs"

sub init()
    m.framework = new Rotor.Framework()
end sub

function getRootNode(params = invalid) as dynamic
    return m.framework.getRootNode()
end function

function getWidget(searchPattern as string, HID = "0" as string) as dynamic
    return m.framework.getWidget(searchPattern, HID)
end function

sub destroy(params = invalid)
    if m.framework <> invalid
        m.framework.destroy()
        m.framework = invalid
    end if
end sub

function render(payload as object, params = {} as object) as dynamic
    m.framework.render(payload, params)
    return m.framework.getRootNode()
end function

function renderTest(testKey as string)
    template = ""
    if testKey = "helloTest"
        template = getHelloTemplate()
    end if
    m.framework.render(template)
    return m.framework.getRootNode()
end function

' MARK: templates

function getHelloTemplate() as object

    autoSizeObserver = sub(payload as object) typecast m as Rotor.Widget
        labelNode = m.node
        rectNode = m.parent.node

        textBounds = labelNode.localBoundingRect()
        textWidth = textBounds.width

        rectNode.width = textWidth + (HELLO_WORLD_CONFIG.PaddingX * 2)
        labelNode.width = textWidth
    end sub

    return {
        id: "helloGroup",
        nodeType: "Group",
        fields: {
            translation: [SAFE_AREA.x, SAFE_AREA.y]
        },
        children: [{
            id: "helloRect",
            nodeType: "Rectangle",
            fields: {
                width: 0,
                height: HELLO_WORLD_CONFIG.RectHeight,
                color: "0x202020FF"
            },
            children: {
                id: "helloLabel",
                nodeType: "Label",
                fields: {
                    enableRenderTracking: true,
                    text: HELLO_WORLD_TEXT,
                    horizAlign: "center",
                    vertAlign: "center",
                    translation: [HELLO_WORLD_CONFIG.PaddingX, 0],
                    width: 0,
                    height: HELLO_WORLD_CONFIG.RectHeight
                },
                observer: [{
                    fieldId: "renderTracking",
                    callback: autoSizeObserver
                }]
            }
        }]
    }
end function
