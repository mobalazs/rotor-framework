import "pkg:/components/tests/dispatcherTest/DispatcherTest.const.bs"

class AncestorViewModel extends Rotor.ViewModel

    props = {
        foo: ""
    }

    fooDispatcher as Rotor.Dispatcher

    override function template() as object
        return {
            children: [{
                id: "descendantViewModel",
                viewModel: DescendantViewModel
            }]
        }
    end function

    override sub onCreateView()

        ' Get fooDispatcher Dispatcher (if not created above)
        fooDispatcher = m.getDispatcher("fooDispatcher")

        ' Get current state of fooDispatcher
        fooDispatcher.getState(sub(props, state)
            ' Get end instantly parse content
            props.foo = state.foo
        end sub)

        ' Update foo on state change
        fooDispatcher.addListener({
            mapStateToProps: sub(props, state)
                props.foo = state.foo
            end sub
            ' callback: m.onUpdateView ' Optional: onUpdateView is the default callback
        })
    end sub

    override sub onUpdateView()
        ' Do nothing
    end sub

end class
class DescendantViewModel extends Rotor.ViewModel

    override function template() as object
        return {
            dispatcher: "fooDispatcher"
        }
    end function

    sub dispatchUpdateFoo(value as string)
        ' You can get the dispatcher via 'dispatcher' by viewBuilder template.
        ' Dispatch foo update
        m.viewModelState.dispatcher.fooDispatcher.dispatch({
            type: IntentTypes.UPDATE_FOO,
            payload: {
                foo: value
            }
        })
    end sub

end class

' MARK: Helper methods for tests

function getDispatcherTestTemplate() as object
    return {
        id: "ancestorViewModel",
        viewModel: AncestorViewModel
    }
end function
