import "pkg:/src/source/libs/rotorFramework/RotorFramework.bs"
namespace tests

  @suite
  class FocusPluginCoreTests extends tests.BaseTestSuite

    private plugin
    private fwMock
    private fakeWidgetTree

    protected override sub beforeEach()
      super.beforeEach()

      ' Widget tree mock
      m.fakeWidgetTree = {
        get: function(HID) return m.widgets[HID] end function,
        widgets: {}
      }

      ' Framework mock
      m.fwMock = {
        builder: {
          widgetTree: m.fakeWidgetTree
        },
        plugins: {}
      }

      ' Plugin instance
      m.plugin = new Rotor.FocusPlugin("focus")
      m.plugin.frameworkInstance = m.fwMock
      m.plugin.init()
      m.fwMock.plugins["focus"] = m.plugin
    end sub

    '----------------------------------------------------------
    @describe("Init & Internal State")
    '----------------------------------------------------------

    @it("initializes stacks and timer")
    sub _()
      m.assertNotInvalid(m.plugin.focusItemStack)
      m.assertNotInvalid(m.plugin.groupStack)
      m.assertNotInvalid(m.plugin.longPressTimer)
    end sub

    '----------------------------------------------------------
    @describe("Global focus state")
    '----------------------------------------------------------

    @it("stores and retrieves focused HID and ID")
    sub _()
      m.plugin.storeGlobalFocusHID("HID-xyz", "id-abc")
      m.assertEqual(m.plugin.globalFocusHID, "HID-xyz")
      m.assertEqual(m.plugin.globalFocusId, "id-abc")
    end sub

    '----------------------------------------------------------
    @describe("Focus Config Registration")
    '----------------------------------------------------------

    @it("registers group with setFocusConfig")
    sub _()
      widget = makeMockWidget("group-1", "HID-1")
      config = {
        group: {
          defaultFocusId: "btn-1"
        }
      }

      m.plugin.setFocusConfig(widget, config)
      m.assertTrue(m.plugin.groupStack.has("HID-1"))
    end sub

    @it("removes group with removeFocusConfig")
    sub _()
      widget = makeMockWidget("group-1", "HID-1")
      config = {
        group: {
          defaultFocusId: "btn-1"
        }
      }

      m.plugin.setFocusConfig(widget, config)
      m.plugin.removeFocusConfig("HID-1")
      m.assertFalse(m.plugin.groupStack.has("HID-1"))
    end sub

    '----------------------------------------------------------
    @describe("setFocus()")
    '----------------------------------------------------------

    @it("focuses item if enabled and visible")
    sub _()
      widget = makeMockWidget("btn-1", "HID-1")
      widget.node.setFocus = sub(v) widget.viewModelState.focused = v : end sub
      m.fakeWidgetTree.widgets["HID-1"] = widget

      focusItem = makeMockFocusItem(widget, true, true)
      m.plugin.focusItemStack.set("HID-1", focusItem)

      result = m.plugin.setFocus("HID-1")
      m.assertTrue(result)
      m.assertEqual(m.plugin.globalFocusHID, "HID-1")
      m.assertTrue(widget.viewModelState.focused)
    end sub

    @it("fails to focus disabled item")
    sub _()
      widget = makeMockWidget("btn-2", "HID-2")
      widget.node.visible = true
      m.fakeWidgetTree.widgets["HID-2"] = widget

      focusItem = makeMockFocusItem(widget, false, true)
      m.plugin.focusItemStack.set("HID-2", focusItem)

      result = m.plugin.setFocus("HID-2")
      m.assertFalse(result)
    end sub

    @it("fails to focus invisible item")
    sub _()
      widget = makeMockWidget("btn-3", "HID-3")
      widget.node.visible = false
      m.fakeWidgetTree.widgets["HID-3"] = widget

      focusItem = makeMockFocusItem(widget, true, true)
      m.plugin.focusItemStack.set("HID-3", focusItem)

      result = m.plugin.setFocus("HID-3")
      m.assertFalse(result)
    end sub

    '----------------------------------------------------------
    @describe("FocusItemClass applyFocus")
    '----------------------------------------------------------

    @it("applyFocus sets isFocused and calls callbacks")
    sub _()
      node = { setFocus: sub(_) : end sub, setField: sub(_, _) : end sub }
      viewModelState = {}
      onFocusCalled = false
      onFocusChangedCalled = false

      widget = {
        viewModelState: viewModelState,
        node: node
      }

      config = {
        id: "test",
        HID: "HID-test",
        widget: widget,
        isFocused: false,
        isEnabled: true,
        onFocus: sub(_) onFocusCalled = true : end sub,
        onFocusChanged: sub(_, val) onFocusChangedCalled = val : end sub
      }

      focusItem = new Rotor.FocusPluginHelper.FocusItemClass(config)
      focusItem.applyFocus(true)

      m.assertTrue(focusItem.isFocused)
      m.assertTrue(onFocusCalled)
      m.assertTrue(onFocusChangedCalled)
    end sub

    '----------------------------------------------------------
    @describe("GroupClass getFallbackIdentifier")
    '----------------------------------------------------------

    @it("returns lastFocusedHID if set")
    sub _()
      config = {
        id: "g",
        HID: "gHID",
        widget: {},
        group: {},
        lastFocusedHID: "HID-latest"
      }
      group = new Rotor.FocusPluginHelper.GroupClass(config)
      m.assertEqual(group.getFallbackIdentifier(), "HID-latest")
    end sub

  end class

  '----------------------------------------------------------
  ' Helpers
  '----------------------------------------------------------

  function makeMockWidget(id, HID)
    return {
      id: id,
      HID: HID,
      viewModelState: {},
      node: {
        visible: true,
        setFocus: sub(_) : end sub,
        setField: sub(_, _) : end sub
      }
    }
  end function

  function makeMockFocusItem(widget as object, isEnabled as boolean, visible as boolean)
    return {
      HID: widget.HID,
      id: widget.id,
      widget: widget,
      node: widget.node,
      isEnabled: isEnabled,
      enableNativeFocus: false,
      applyFocus: sub(_, _) : end sub,
      callOnSelectedFnOnWidget: sub() : end sub,
      getStaticNodeIdInDirection: function(_) return "" end function,
      refreshBounding: sub() : end sub,
      enableSpatialNavigation: true,
      callLongPressHandler: function(_, _) return false end function,
      metrics: { segments: {}, middlePoint: { x: 0, y: 0 } }
    }
  end function

end namespace
