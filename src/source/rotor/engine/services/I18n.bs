' --------------------------------
' | View handlers
namespace Rotor.ViewBuilder


    '***************************************************************************
    '** Class: I18nService
    '**
    '** Description:
    '**
    '**
    '** Future improvement:
    '**   Implement more static data and expressions like dateFormat, timeFormat, currencySymbol, decimalSeparator, thousandsSeparator
    '**   Examples:
    '**   i18n.getDecimalSeparator()
    '**   i18n.getThousandSeparator()
    '**   i18n.getCurrencyCode()
    '**   i18n.getPluralCategory(count)
    '**
    '***************************************************************************

    class I18nService


        l10n = {}
        cache = {}
        locale as string
        isRTL = false
        frameworkInstance as Rotor.Framework

        ' RTL language codes
        RTL_LANGUAGES = ["ar", "he", "fa", "ur"]

        sub init(frameworkInstance as Rotor.Framework)
            m.locale = "en_US"
            m.isRTL = m.detectRTL(m.locale)
            ' m.locale = frameworkInstance.getInfo().device.currentLocale
            ' m.frameworkInstance = frameworkInstance
        end sub

        sub setLocal(locale as string)
            m.locale = locale
            m.isRTL = m.detectRTL(locale)
        end sub

        function getLocale() as string
            return m.locale
        end function

        ' Detect if locale uses RTL (Right-to-Left) direction
        private function detectRTL(locale as string) as boolean
            if locale = invalid or locale = "" then return false

            ' Extract language code (e.g., "ar_SA" -> "ar")
            languageCode = locale.Split("_")[0]

            ' Check if language is in RTL list
            for each rtlLang in m.RTL_LANGUAGES
                if languageCode = rtlLang then return true
            end for

            return false
        end function

        sub setL10n(l10n as object)
            m.l10n = l10n
            m.refreshCache()
        end sub

        sub extendL10n(l10n as object)
            Rotor.Utils.deepExtendAA(m.l10n, l10n)
            m.refreshCache()
        end sub


        sub destroy()
            ' m.frameworkInstance = invalid
            m.cache.Clear()
            m.l10n.Clear()
        end sub

        sub refreshCache()
            m.cache.Clear()
            for each cacheKey in m.cache
                m.cache[cacheKey] = Rotor.Utils.getCloneByKeyPath(m.l10n, cacheKey)
            end for
        end sub

        public function getIsRtl() as boolean
            return m.isRTL
        end function

        public function getL10n(keyPath) as object
            ' Best for regular use cases
            if keyPath = invalid then return m.l10n ' Return just reference to l10n

            ' Best for unit tests or story books or special use cases
            firstKey = keyPath.Split(".")[0]
            return m.getAssetByKeyPath(keyPath)[firstKey] ' Return cloned and merged sliced data from l10n

        end function

        function getAssetByKeyPath(keyPath as dynamic) as object
            keysPaths = Rotor.Utils.ensureArray(keyPath)
            asset = {}
            for each keyPath in keysPaths
                if m.cache.DoesExist(keyPath)
                    additionalAsset = m.cache[keyPath]
                else
                    additionalAsset = Rotor.Utils.getCloneByKeyPath(m.l10n, keyPath) ' TODO: reconsider to use getValueByKeyPath instead
                    m.cache[keyPath] = additionalAsset
                end if
                Rotor.Utils.deepExtendAA(asset, additionalAsset)
            end for
            return asset
        end function

    end class

end namespace

