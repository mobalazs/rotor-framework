namespace Rotor.ViewBuilder

    function createWidget(postProcessBuffer as object, config as object, parentHID = "0" as string) as object

        ViewModelClass = config.viewModel
        config.delete("viewModel")

        ' Store widget
        widget = m.frameworkInstance.builder.widgetTree.add({
            id: config.id,
            parentHID: parentHID
        }, ViewModelClass)
        HID = widget.HID

        ' * Decorators

        widget.getFrameworkInstance = function() as object
            return GetGlobalAA().rotor_framework_helper.frameworkInstance
        end function

        widget.getInfo = function() as object
            return m.getFrameworkInstance().getInfo()
        end function

        widget.refresh = sub(featureKeyPaths as object)
            iterateKeyPaths = Rotor.Utils.ensureArray(featureKeyPaths)
            refreshObject = {
                ' id: m.id, ' not required
                ' HID: m.HID ' will be applied by render
            }
            for each keyPath in iterateKeyPaths
                refreshObject.append(Rotor.Utils.getCloneByKeyPath(m, keyPath))
            end for
            m.render(refreshObject)
        end sub

        widget.getWidget = function(searchPattern as string) as object
            return m.getFrameworkInstance().builder.widgetTree.get(searchPattern, m.HID)
        end function

        widget.getSiblingWidget = function(id as string) as object
            return m.parent.children[id]
        end function

        widget.getViewModel = function() as object
            if m.isViewModel = true
                return m
            else
                return m.getFrameworkInstance().builder.widgetTree.getByHID(m.vmHID)
            end if
        end function

        widget.getParentViewModel = function() as object
            return m.getViewModel().parent.getViewModel()
        end function

        widget.getRootWidget = function() as object
            return m.getFrameworkInstance().builder.widgetTree.getByHID("0")
        end function

        widget.findWidgets = function(searchPattern as string) as object
            return m.getFrameworkInstance().builder.widgetTree.find(searchPattern, m.HID)
        end function

        widget.getChildrenWidgets = function(searchPattern = "" as string) as object
            if searchPattern = "" then searchPattern = m.HID
            return m.getFrameworkInstance().builder.widgetTree.getChildrenWidgets(searchPattern, m.HID)
        end function

        widget.getSubtreeClone = function(searchPattern = "" as string, keyPathList = [] as object) as object
            if searchPattern = "" then searchPattern = m.HID
            return m.getFrameworkInstance().builder.widgetTree.getSubtreeClone(searchPattern, keyPathList, m.parentHID)
        end function

        widget.render = sub(payloads as dynamic, params = {} as object)
            for each payload in Rotor.Utils.ensureArray(payloads)
                if payload.DoesExist("id") = false
                    ' Self update
                    payload.id = m.id
                    payload.HID = m.HID
                else if payload.id <> m.id
                    ' Update descendants starting from this widget
                    payload.parentHID = m.HID
                else
                    ' Update descendants starting from parent widget
                    payload.parentHID = m.parentHID
                end if
            end for
            if Rotor.Utils.isValid(params.callback) then params.callbackScope = m
            m.getFrameworkInstance().builder.render(payloads, params)
        end sub

        widget.erase = sub(payloads = invalid as dynamic, shouldSkipNodePool = false as boolean)
            if payloads = invalid
                ' for self destroy
                payloads = m.HID
                parentHID = m.parentHID
            else
                ' for children destroy
                parentHID = m.HID
            end if
            m.getFrameworkInstance().builder.erase(payloads, shouldSkipNodePool, parentHID)
        end sub

        widget.getDispatcher = function(dispatcherId as string) as object
            return m.getFrameworkInstance().dispatcherProvider.getFacade(dispatcherId, m)
        end function

        widget.animator = function(animatorId) as object
            return m.getFrameworkInstance().animatorProvider.getFactory(animatorId, m)
        end function

        ' Extend config from View template
        if widget.isViewModel = true

            ' merge props
            if Rotor.Utils.isAssociativeArray(config.props)
                Rotor.Utils.deepExtendAA(widget.props, config.props)
            end if
            ' merge viewModelState
            if Rotor.Utils.isAssociativeArray(config.viewModelState)
                Rotor.Utils.deepExtendAA(widget.viewModelState, config.viewModelState)
            end if

            ' l10n
            i18nService = widget.getFrameworkInstance().i18nService
            ' Always include l10n
            keysPaths = Rotor.Utils.isString(config.i18n?.path) ? config.i18n.path : Rotor.Utils.isArray(config.i18n?.paths) ? config.i18n.paths : invalid
            widget.viewModelState.l10n = i18nService.getL10n(keysPaths)
            ' Include isRTL flag
            if config?.i18n?.includeIsRtl = true
                widget.viewModelState.isRTL = i18nService.getIsRtl()
            end if
            ' Include locale str
            if config?.i18n?.includeLocale = true
                widget.viewModelState.locale = i18nService.getLocale()
            end if


            ' Call onCreateView before compile template, because templates may require props served by onCreateView.

            widget.onCreateView()

            template = widget.template()

            if Rotor.Utils.isFunction(widget.onTemplateCreated)
                widget.onTemplateCreated(template) ' hook
            end if

            if template <> invalid and template.Count() > 0
                templateChildren = template.children
                template.delete("children")
                config = Rotor.Utils.deepExtendAA(config, template)
                config.children = templateChildren
            end if

        end if

        if Rotor.Utils.isFunction(config.onMountWidget)
            widget.onMountWidget = config.onMountWidget
        end if

        if Rotor.Utils.isFunction(config.onUpdateWidget)
            widget.onUpdateWidget = config.onUpdateWidget
        end if

        if Rotor.Utils.isFunction(config.onDestroyWidget)
            widget.onDestroyWidget = config.onDestroyWidget
        end if

        if Rotor.Utils.isFunction(config.onRenderSettled) = true
            m.frameworkInstance.builder.callbackQueue.push({
                callback: config.onRenderSettled,
                callbackScope: widget
            })
            config.delete("onRenderSettled")
        end if


        ' get finalized children, will be passed to processor
        if config.children = invalid then config.children = {}
        children = config.children

        ' Create node
        if Rotor.Utils.isString(config.nodeType) then config.nodeType = config.nodeType ' both key is available
        nodeType = Rotor.Utils.isString(config.nodeType) ? config.nodeType : "Group"
        widget.node = m.frameworkInstance.builder.nodePool.acquireNode(nodeType)
        widget.nodeType = nodeType

        widget.markedToAppend = true

        #if debug
            Rotor.Utils.setCustomFields(widget.node, {
                id: `${widget.id}-${widget.HID}`
            },
            true, false)
        #end if

        ' * Plugins


        ' Add plugin specific decorators to widget
        widgetAddon = {}

        pluginKeyList = m.frameworkInstance.builder.pluginAdapter.pluginKeyList
        pluginKeyList.ResetIndex()
        pluginKey = pluginKeyList.GetIndex()
        while pluginKey <> invalid

            if config.doesExist(pluginKey)

                ' plugin :: hooks
                for each LifeCycleHookType in [Rotor.Const.LifeCycleHookType.BEFORE_MOUNT, Rotor.Const.LifeCycleHookType.AFTER_MOUNTED]
                    if m.frameworkInstance.builder.pluginAdapter.pluginHooks[LifeCycleHookType].DoesExist(pluginKey)
                        widget[pluginKey] = config[pluginKey]
                        postProcessBuffer.add({
                            isPlugin: true,
                            widget: widget,
                            hookType: LifeCycleHookType,
                            ' isView: widget?.isView ?? false,
                            pluginKey: pluginKey
                        })
                    end if
                end for

                ' plugin :: addons
                plugin = m.frameworkInstance.plugins[pluginKey]
                if Rotor.Utils.isValid(plugin["widgetMethods"])
                    if widgetAddon.plugins = invalid then widgetAddon.plugins = {}
                    if widgetAddon.plugins[pluginKey] = invalid then widgetAddon.plugins[pluginKey] = {
                        pluginKey: pluginKey,
                        id: widget.id,
                        HID: widget.HID,
                        ' isView: widget?.isView ?? false,
                        parentHID: widget.parentHID
                        ' future improvement: make more widget params available
                    }
                    widgetAddon.plugins[pluginKey].append(plugin["widgetMethods"])
                end if

            end if

            pluginKey = pluginKeyList.GetIndex()
        end while

        ' APPEND ADDONS
        if widgetAddon.Count() > 0
            widget.append(widgetAddon)
        end if



        appendChildProcess = {
            hookType: Rotor.Const.LifeCycleHookType.APPEND_CHILD,
            widget: widget
        }
        if config.zIndex <> invalid
            appendChildProcess.zIndex = config.zIndex
        end if

        postProcessBuffer.add(appendChildProcess)

        if Rotor.Utils.isFunction(widget.onMountWidget) or widget?.isViewModel = true
            postProcessBuffer.add({
                hookType: Rotor.Const.LifeCycleHookType.MOUNTED,
                widget: widget
            })
        end if

        return {
            HID: HID,
            children: children,
            parentHID: parentHID,
            id: widget.id
        }

    end function

end namespace
