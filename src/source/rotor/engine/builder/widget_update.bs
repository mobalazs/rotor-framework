namespace Rotor.ViewBuilder


    function updateWidget(postProcessBuffer as object, widget as object, newConfig as object) as object
        HID = widget.HID

        isWidgetChanged = false

        if widget?.isViewModel = true and newConfig.DoesExist("props")
            newConfig.delete("viewModel") ' In case app update with the same template.
            postProcessBuffer.add({
                hookType: Rotor.Const.LifeCycleHookType.VIEWMODEL_STATE_UPDATE,
                widget: widget,
                props: newConfig.props
            })
        end if

        if newConfig.DoesExist("viewModelState")
            Rotor.Utils.deepExtendAA(widget.viewModelState, newConfig.viewModelState)
            isWidgetChanged = true
        end if

        ' Method decorators during update

        pluginKeyList = m.frameworkInstance.builder.pluginAdapter.pluginKeyList
        pluginKeyList.ResetIndex()
        pluginKey = pluginKeyList.GetIndex()
        while pluginKey <> invalid

            if newConfig.doesExist(pluginKey)
                for each LifeCycleHookType in [Rotor.Const.LifeCycleHookType.BEFORE_UPDATE, Rotor.Const.LifeCycleHookType.AFTER_UPDATED]
                    if m.frameworkInstance.builder.pluginAdapter.pluginHooks[LifeCycleHookType].DoesExist(pluginKey)

                        isWidgetChanged = true

                        process = {
                            isPlugin: true,
                            widget: widget,
                            hookType: LifeCycleHookType,
                            isView: widget?.isView ?? false,
                            pluginKey: pluginKey
                        }

                        if LifeCycleHookType = Rotor.Const.LifeCycleHookType.BEFORE_UPDATE or LifeCycleHookType = Rotor.Const.LifeCycleHookType.AFTER_UPDATED
                            newValue = newConfig[pluginKey]
                            oldValue = widget[pluginKey]
                            ' Change is depend on plugin ;)
                            process.append({
                                oldValue: oldValue,
                                newValue: newValue
                            })
                        end if

                        postProcessBuffer.add(process)

                    end if
                end for
            end if

            pluginKey = pluginKeyList.GetIndex()
        end while


        if Rotor.Utils.isInteger(newConfig.zIndex)
            postProcessBuffer.add({
                hookType: Rotor.Const.LifeCycleHookType.REINDEX_CHILD,
                widget: widget,
                zIndex: newConfig.zIndex
            })
        end if


        if Rotor.Utils.isFunction(newConfig.onUpdateWidget)
            isWidgetChanged = true
            widget.onUpdateWidget = newConfig.onUpdateWidget
        end if

        if Rotor.Utils.isFunction(newConfig.onDestroyWidget)
            widget.onDestroyWidget = newConfig.onDestroyWidget
        end if

        if Rotor.Utils.isFunction(newConfig.onRenderSettled) = true
            m.frameworkInstance.builder.callbackQueue.push({
                callback: newConfig.onRenderSettled,
                callbackScope: widget
            })
            newConfig.delete("onRenderSettled")
        end if


        if isWidgetChanged = true and Rotor.Utils.isFunction(widget.onUpdateWidget)
            postProcessBuffer.add({
                hookType: Rotor.Const.LifeCycleHookType.UPDATED,
                widget: widget
            })
        end if

        return {
            children: newConfig.children,
            HID: HID
        }

    end function


end namespace
