interface Intent
    type as string
    payload as object
end interface

class ListenerForDispatchers

    listeners = []

    sub notifyListeners(state as object)

        listenerCount = m.listeners.Count()
        listenerIndex = 0
        while listenerIndex < listenerCount
            listener = m.listeners[listenerIndex]

            scope = listener.listenerScope

            if Rotor.Utils.isFunction(listener.shouldUpdate)
                ' shouldUpdate = listener.shouldUpdate(scope.props, state)
                shouldUpdate = Rotor.Utils.callbackScoped(listener.shouldUpdate, scope, scope.props, state)
            else if Rotor.Utils.isFunction(listener.allowUpdate)
                shouldUpdate = Rotor.Utils.callbackScoped(listener.allowUpdate, scope, state)
            else
                shouldUpdate = true
            end if

            if shouldUpdate

                if Rotor.Utils.isFunction(listener.mapStateToProps)
                    listener.mapStateToProps(scope.props, state)
                else if Rotor.Utils.isAssociativeArray(scope.props)
                    Rotor.Utils.deepExtendAA(scope.props, state)
                end if

                callback = listener.callback
                if callback <> invalid
                    Rotor.Utils.callbackScoped(callback, scope)
                end if

                callbackWithState = listener.callbackWithState
                if callbackWithState <> invalid
                    Rotor.Utils.callbackScoped(callbackWithState, scope, state)
                end if

                if listener?.once = true
                    listener.listenerScope = invalid
                    listener.callback = invalid
                    m.listeners.Delete(listenerIndex)
                    listenerCount--
                else
                    listenerIndex++
                end if

            else
                listenerIndex++
            end if

        end while
    end sub

    sub addListener(listenerConfig as object, listenerId as string, listenerScope as object)

        #if debug
            hasPropsMapper = Rotor.Utils.isFunction(listenerConfig.mapStateToProps)
            hasPropsUpdateChecker = Rotor.Utils.isFunction(listenerConfig.shouldUpdate)
            isPropsAA = Rotor.Utils.isAssociativeArray(listenerScope.props)
            if not isPropsAA and (hasPropsMapper or hasPropsUpdateChecker)
                throw { message: "props does not exist in caller scope. `mapStateToProps` and `shouldUpdate` only can be used in Widgets and ViewModels. Use allowUpdate instead." }
            end if
        #end if

        m.listeners.push({
            listenerId: listenerId,
            listenerScope: listenerScope,

            mapStateToProps: listenerConfig?.mapStateToProps,
            shouldUpdate: listenerConfig?.shouldUpdate,
            allowUpdate: listenerConfig?.allowUpdate,
            callback: listenerConfig?.callback,
            callbackWithState: listenerConfig?.callbackWithState,
            once: listenerConfig?.once ?? false
        })
    end sub

    sub removeAllListenersByListenerId(listenerId as string)
        listenerCount = m.listeners.Count()
        listenerIndex = listenerCount - 1
        while listenerIndex >= 0 and listenerCount > 0
            if m.listeners[listenerIndex].listenerId = listenerId
                m.listeners[listenerIndex].Clear()
                ' m.listeners[listenerIndex].shouldUpdate = invalid
                ' m.listeners[listenerIndex].allowUpdate = invalid
                ' m.listeners[listenerIndex].mapStateToProps = invalid
                ' m.listeners[listenerIndex].callback = invalid
                ' m.listeners[listenerIndex].callbackWithState = invalid
                ' m.listeners[listenerIndex].listenerScope = invalid
                m.listeners.delete(listenerIndex)
                listenerCount--
            end if
            listenerIndex--
        end while
    end sub

    sub runMapStateToProps(state as object, mapStateToProps = invalid as Dynamic, callerScope = invalid as object)
        if Rotor.Utils.isFunction(mapStateToProps)
            if Rotor.Utils.isAssociativeArray(callerScope?.props)
                mapStateToProps(callerScope.props, state)
            else
                #if debug
                    throw { message: "props does not exist in caller scope. `mapStateToProps` can be sued in Widgets and ViewModels only." }
                #end if
            end if
        end if
    end sub

    sub destroy()
        ' remove all listeners
        if m.listeners.Count() > 0
            for each listener in m.listeners
                listener.listenerScope = invalid
                listener.callback = invalid
            end for
        end if
        m.listeners.Clear()
    end sub

end class


