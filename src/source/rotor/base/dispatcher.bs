import "listenerForDispatchers.bs"


namespace Rotor

    function createDispatcher(customDispatcherId as string, modelInstance as Model, reducerInstance as Reducer) as DispatcherFacade
        m.dispatcherInstance = new Rotor.Dispatcher(customDispatcherId, modelInstance, reducerInstance) as Dispatcher

        globalScope = GetGlobalAA()
        dispatcherFacadeInstance = globalScope.appFw.dispatcherProvider.getFacade(customDispatcherId, m)

        return dispatcherFacadeInstance
    end function

    class Dispatcher extends ListenerForDispatchers

        middlewares = []
        isExternal = false
        isDispatchingInProgress = false
        dispatchQueue = []
        dispatcherId as string
        taskNode as object
        reducerInstance as object
        modelInstance as object

        sub new(dispatcherId = "" as string, modelInstance = invalid as object, reducerInstance = invalid as object)
            super()

            if dispatcherId = "" then dispatcherId = Rotor.Utils.getUUIDHex()
            m.dispatcherId = dispatcherId

            globalScope = GetGlobalAA()
            m.taskNode = globalScope.top

            m.reducerInstance = reducerInstance
            m.reducerInstance.ownerDispatcher = m ' will be destroyed properly
            m.reducerInstance.ownerDispatcherId = dispatcherId
            m.modelInstance = modelInstance

            ' for render thread (notification and data)
            m.taskNode.addField(m.dispatcherId, "node", true)

            m.exposeState()

            ' REGISTER DISPATCHER
            dispatcherProvider = globalScope.appFw.dispatcherProvider
            dispatcherProvider.registerDispatcher(m, dispatcherId) ' self registration
        end sub

        sub exposeState()

            newState = CreateObject("roSGNode", "ContentNode")
            newState.addFields(m.modelInstance.state)
            m.taskNode.setField(m.dispatcherId, newState)

        end sub

        listeners = []

        sub dispatch(intent as Intent)

            if intent?.payload <> invalid and intent.payload.Count() > 1 and intent.payload = invalid then throw "[WARNING] Intent payload is invalid."

            if m.isDispatchingInProgress = false

                currentState = m.modelInstance.state
                newState = m.reducerInstance.reduce(currentState, intent)

                ' If intention has been dropped by a middleware
                if newState = invalid then return

                m.exposeState()
                m.notifyListeners(newState) ' Notify listeners which are also onwned by the same thread and not external (synchronously)

                if m.dispatchQueue.Count() > 0
                    intent = m.dispatchQueue.shift()
                    m.dispatch(intent)
                end if

            else

                m.dispatchQueue.push(intent)

            end if

        end sub

        function getState(mapStateToProps = invalid as Dynamic, callerScope = invalid as object) as object

            state = m.modelInstance.state

            m.runMapStateToProps(state, mapStateToProps, callerScope)

            return state
        end function

        sub asyncReducerCallback(msg)
            m.reducerInstance.asyncReducerCallback(msg)
        end sub

        override sub destroy()
            super.destroy()

            m.dispatchQueue.clear()

            frameworkInstance = GetGlobalAA().rotor_framework_helper.frameworkInstance
            frameworkInstance.dispatcherProvider.deregisterDispatcher(m.dispatcherId)

            m.taskNode = invalid
            m.modelInstance = invalid
            m.reducerInstance = invalid
        end sub

    end class

end namespace

