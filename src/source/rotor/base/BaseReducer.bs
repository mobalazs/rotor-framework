
' namespace Reducers

'--------------------------------------------------------------------------
' @class Reducer
' @description Base Reducer class that handles state transitions in the Rotor framework.
'              Reducers are pure functions that compute the next state based on the current
'              state and an intent (action). They work in conjunction with dispatchers and
'              models to implement unidirectional data flow. Reducers can also apply
'              middleware functions to intercept and transform intents before state computation.
' @notes:
' Override the reducer() method in derived classes to implement custom state logic.
' Override the middlewares variable in derived classes to implement array of middleware functions.
'--------------------------------------------------------------------------
class Reducer

    model as object

    ' Array of middleware functions with signature: function(intent as Intent, state as Object) as Dynamic
    ' Each middleware can intercept/transform intents or return invalid to cancel state change
    middlewares = []

    middlewareFnScoped as dynamic
    getDispatcher as function
    dispatch as function
    ownerDispatcher as object
    ownerDispatcherId as string
    port as object

    sub new()

        frameworkInstance = GetGlobalAA().rotor_framework_helper.frameworkInstance
        m.port = frameworkInstance.port ' Add port to reducer

        m.getDispatcher = function(dispatcherId as string) as object
            return GetGlobalAA().rotor_framework_helper.frameworkInstance.dispatcherProvider.getFacade(dispatcherId, m)
        end function

        m.dispatch = sub(intent as object)
            m.ownerDispatcher.dispatch(intent)
        end sub

    end sub

    '--------------------------------------------------------------------------
    ' @method reducer
    ' @description Pure function that computes the next state based on the current state and intent. Override this method in derived classes to implement custom state transitions.
    ' @param {Object} state - The current state object
    ' @param {Intent} intent - The intent object containing the action type and payload
    ' @return {Object} The new state object (default implementation returns unchanged state)
    '--------------------------------------------------------------------------
    public function reducer(state as object, intent as Intent)
        return state
    end function

    public function applyMiddlewares() as object
        return []
    end function

    function reduce(state as object, intent as Intent) as object
        if intent?.payload <> invalid and intent.payload.Count() > 1 and intent.payload = invalid then throw "[WARNING] Intent payload is invalid."

        ' Resolve middlewares
        middlewares = m.applyMiddlewares()
        mwIndex = 0
        mwCount = middlewares.Count()
        while intent <> invalid and mwIndex < mwCount
            middlewareFnScoped = middlewares[mwIndex]
            m.middlewareFnScoped = middlewareFnScoped
            intent = m.middlewareFnScoped(intent, state)
            mwIndex++
        end while
        m.middlewareFnScoped = invalid ' invalidate scoped fn
        if intent = invalid then return invalid

        ' Resolve Reducer
        newState = m.reducer(state, intent)

        return newState

    end function

    sub asyncReducerCallback(msg)
        ' data = msg.getData()
    end sub

    sub destroy()
        m.ownerDispatcher = invalid
        m.port = invalid
    end sub

end class

' end namespace
