' ===== I18N SERVICE =====
namespace Rotor.ViewBuilder

    ' =====================================================================
    ' I18nService - Internationalization service for managing locales and localized content
    '
    ' Provides l10n (localization) data access, RTL detection, and caching.
    '
    ' @future Implement more static data and expressions like dateFormat, timeFormat,
    '         currencySymbol, decimalSeparator, thousandsSeparator.
    '         Examples: getDecimalSeparator(), getThousandSeparator(),
    '         getCurrencyCode(), getPluralCategory(count)
    ' =====================================================================
    class I18nService


        l10n = {}
        cache = {}
        locale as string
        isRTL = false
        frameworkInstance as Rotor.Framework

        ' RTL language codes
        RTL_LANGUAGES = ["ar", "he", "fa", "ur"]

        ' ---------------------------------------------------------------------
        ' init - Initializes the i18n service with default locale
        '
        ' @param {Rotor.Framework} frameworkInstance - Framework instance reference
        '
        sub init(frameworkInstance as Rotor.Framework)
            m.locale = "en_US"
            m.isRTL = m.detectRTL(m.locale)
            ' m.locale = frameworkInstance.getInfo().device.currentLocale
            ' m.frameworkInstance = frameworkInstance
        end sub

        ' ---------------------------------------------------------------------
        ' setLocal - Sets the current locale and updates RTL flag
        '
        ' @param {string} locale - Locale string (e.g., "en_US", "ar_SA")
        '
        sub setLocal(locale as string)
            m.locale = locale
            m.isRTL = m.detectRTL(locale)
        end sub

        ' ---------------------------------------------------------------------
        ' getLocale - Gets the current locale string
        '
        ' @returns {string} Current locale (e.g., "en_US")
        '
        function getLocale() as string
            return m.locale
        end function

        ' ---------------------------------------------------------------------
        ' detectRTL - Detects if locale uses RTL (Right-to-Left) direction
        '
        ' @param {string} locale - Locale string to check
        ' @returns {boolean} True if locale is RTL, false otherwise
        ' @private
        '
        private function detectRTL(locale as string) as boolean
            if locale = invalid or locale = "" then return false

            ' Extract language code (e.g., "ar_SA" -> "ar")
            languageCode = locale.Split("_")[0]

            ' Check if language is in RTL list
            for each rtlLang in m.RTL_LANGUAGES
                if languageCode = rtlLang then return true
            end for

            return false
        end function

        ' ---------------------------------------------------------------------
        ' setL10n - Sets the localization data and refreshes cache
        '
        ' @param {object} l10n - Localization data object
        '
        sub setL10n(l10n as object)
            m.l10n = l10n
            m.refreshCache()
        end sub

        ' ---------------------------------------------------------------------
        ' extendL10n - Extends the existing localization data and refreshes cache
        '
        ' @param {object} l10n - Localization data to merge
        '
        sub extendL10n(l10n as object)
            Rotor.Utils.deepExtendAA(m.l10n, l10n)
            m.refreshCache()
        end sub

        ' ---------------------------------------------------------------------
        ' destroy - Cleans up cache and l10n data
        '
        sub destroy()
            ' m.frameworkInstance = invalid
            m.cache.Clear()
            m.l10n.Clear()
        end sub

        ' ---------------------------------------------------------------------
        ' refreshCache - Refreshes the l10n cache by re-cloning all cached key paths
        '
        ' @private
        '
        sub refreshCache()
            m.cache.Clear()
            for each cacheKey in m.cache
                m.cache[cacheKey] = Rotor.Utils.getCloneByKeyPath(m.l10n, cacheKey)
            end for
        end sub

        ' ---------------------------------------------------------------------
        ' getIsRtl - Gets whether current locale is RTL
        '
        ' @returns {boolean} True if current locale is RTL
        '
        public function getIsRtl() as boolean
            return m.isRTL
        end function

        ' ---------------------------------------------------------------------
        ' getL10n - Gets localization data by key path or entire l10n object
        '
        ' @param {dynamic} keyPath - Key path string or invalid for entire l10n
        ' @returns {object} Localization data (reference if invalid, cloned if keyPath provided)
        '
        public function getL10n(keyPath) as object
            ' Best for regular use cases
            if keyPath = invalid then return m.l10n ' Return just reference to l10n
            return m.getMultipleAssets(keyPath)
        end function

        ' ---------------------------------------------------------------------
        ' getMultipleAsset - Gets and caches localization data by one or more key paths
        '
        ' @param {dynamic} keyPath - Single key path string or array of key paths
        ' @returns {object} Merged localization data from all key paths
        ' @private
        '
        function getMultipleAssets(keyPath as dynamic) as object
            keysPaths = Rotor.Utils.ensureArray(keyPath)
            assets = {}
            for each keyPath in keysPaths
                if m.cache.DoesExist(keyPath)
                    newAsset = m.cache[keyPath]
                else
                    newAsset = Rotor.Utils.getValueByKeyPath(m.l10n, keyPath, true)
                    newAssetCloned = Rotor.Utils.deepCopy(newAsset)
                    m.cache[keyPath] = newAssetCloned
                end if
                assets.append(newAsset)
            end for
            return assets
        end function

    end class

end namespace

