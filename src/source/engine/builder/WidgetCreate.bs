namespace Rotor.ViewBuilder

    '******************************************************************
    '** createWidget - Creates and initializes a widget instance
    '**
    '** Core widget factory function that handles the complete widget creation lifecycle:
    '**   1. Widget tree registration
    '**   2. Decorator method injection
    '**   3. ViewModel initialization (if applicable)
    '**   4. SceneGraph node creation
    '**   5. Plugin registration and lifecycle hooks
    '**
    '** @param {object} postProcessBuffer - Buffer for deferred plugin/lifecycle operations
    '** @param {object} config - Widget configuration object
    '** @param {string} parentHID - Parent's Hierarchical ID (default: "0" for root)
    '** @return {object} Widget metadata { HID, children, parentHID, id }
    '**
    '** @namespace Rotor.ViewBuilder
    '******************************************************************
    function createWidget(postProcessBuffer as object, config as object, parentHID = "0" as string) as object

        ' Extract and remove ViewModel class from config
        ViewModelClass = config.viewModel
        config.delete("viewModel")

        ' =============================================================
        ' WIDGET TREE REGISTRATION
        ' =============================================================

        ' Register widget in tree and get HID
        widget = m.frameworkInstance.builder.widgetTree.add({
            id: config.id,
            parentHID: parentHID
        }, ViewModelClass)
        HID = widget.HID

        ' =============================================================
        ' WIDGET DECORATOR METHODS
        ' =============================================================
        ' These methods provide widget API for tree navigation,
        ' rendering, state management, and framework integration

        '** getFrameworkInstance - Returns framework instance *'
        widget.getFrameworkInstance = function() as object
            return GetGlobalAA().rotor_framework_helper.frameworkInstance
        end function

        '** getInfo - Returns framework info *'
        widget.getInfo = function() as object
            return m.getFrameworkInstance().getInfo()
        end function

        '** refresh - Refreshes specific widget properties by key paths *'
        widget.refresh = sub(featureKeyPaths as object)
            iterateKeyPaths = Rotor.Utils.ensureArray(featureKeyPaths)
            refreshObject = {}
            for each keyPath in iterateKeyPaths
                refreshObject.append(Rotor.Utils.getCloneByKeyPath(m, keyPath))
            end for
            m.render(refreshObject)
        end sub

        '** getWidget - Finds widget by search pattern from this widget's context *'
        widget.getWidget = function(searchPattern as string) as object
            return m.getFrameworkInstance().builder.widgetTree.get(searchPattern, m.HID)
        end function

        '** getSiblingWidget - Gets sibling widget by ID *'
        widget.getSiblingWidget = function(id as string) as object
            return m.parent.children[id]
        end function

        '** getViewModel - Returns owning ViewModel (self if ViewModel, or parent VM) *'
        widget.getViewModel = function() as object
            if m.isViewModel = true
                return m
            else
                return m.getFrameworkInstance().builder.widgetTree.getByHID(m.vmHID)
            end if
        end function

        '** getParentViewModel - Returns parent's ViewModel *'
        widget.getParentViewModel = function() as object
            return m.getViewModel().parent.getViewModel()
        end function

        '** getRootWidget - Returns root widget (HID "0") *'
        widget.getRootWidget = function() as object
            return m.getFrameworkInstance().builder.widgetTree.getByHID("0")
        end function

        '** findWidgets - Finds multiple widgets by search pattern *'
        widget.findWidgets = function(searchPattern as string) as object
            return m.getFrameworkInstance().builder.widgetTree.find(searchPattern, m.HID)
        end function

        '** getChildrenWidgets - Gets child widgets with optional pattern matching *'
        widget.getChildrenWidgets = function(matchingPattern = "" as string) as object
            return m.getFrameworkInstance().builder.widgetTree.getChildrenWidgets(m, matchingPattern)
        end function

        '** getSubtreeClone - Creates a clone of widget subtree *'
        widget.getSubtreeClone = function(searchPattern = "" as string, keyPathList = [] as object) as object
            if searchPattern = "" then searchPattern = m.HID
            return m.getFrameworkInstance().builder.widgetTree.getSubtreeClone(searchPattern, keyPathList, m.parentHID)
        end function

        '** render - Renders widget updates (self, descendants, or children) *'
        widget.render = sub(payloads as dynamic, params = {} as object)
            for each payload in Rotor.Utils.ensureArray(payloads)
                if payload.DoesExist("id") = false
                    ' Self update
                    payload.id = m.id
                    payload.HID = m.HID
                else if payload.id <> m.id
                    ' Update descendants starting from this widget
                    payload.parentHID = m.HID
                else
                    ' Update descendants starting from parent widget
                    payload.parentHID = m.parentHID
                end if
            end for
            if Rotor.Utils.isValid(params.callback) then params.callbackScope = m
            m.getFrameworkInstance().builder.render(payloads, params)
        end sub

        '** erase - Removes widget(s) from tree *'
        widget.erase = sub(payloads = invalid as dynamic, shouldSkipNodePool = false as boolean)
            if payloads = invalid
                ' Self destroy
                payloads = m.HID
                parentHID = m.parentHID
            else
                ' Children destroy
                parentHID = m.HID
            end if
            m.getFrameworkInstance().builder.erase(payloads, shouldSkipNodePool, parentHID)
        end sub

        '** getDispatcher - Gets dispatcher facade by ID *'
        widget.getDispatcher = function(dispatcherId as string) as object
            return m.getFrameworkInstance().dispatcherProvider.getFacade(dispatcherId, m)
        end function

        '** animator - Gets animator factory by ID *'
        widget.animator = function(animatorId) as object
            return m.getFrameworkInstance().animatorProvider.getFactory(animatorId, m)
        end function

        ' =============================================================
        ' VIEWMODEL INITIALIZATION
        ' =============================================================

        if widget.isViewModel = true

            ' Merge props from config
            if Rotor.Utils.isAssociativeArray(config.props)
                Rotor.Utils.deepExtendAA(widget.props, config.props)
            end if

            ' Merge viewModelState from config
            if Rotor.Utils.isAssociativeArray(config.viewModelState)
                Rotor.Utils.deepExtendAA(widget.viewModelState, config.viewModelState)
            end if

            ' Setup i18n (l10n)
            i18nService = widget.getFrameworkInstance().i18nService
            keysPaths = Rotor.Utils.isString(config.i18n?.path) ? config.i18n.path : Rotor.Utils.isArray(config.i18n?.paths) ? config.i18n.paths : invalid
            widget.viewModelState.l10n = i18nService.getL10n(keysPaths)

            ' Include isRTL flag if requested
            if config?.i18n?.includeIsRtl = true
                widget.viewModelState.isRTL = i18nService.getIsRtl()
            end if

            ' Include locale string if requested
            if config?.i18n?.includeLocale = true
                widget.viewModelState.locale = i18nService.getLocale()
            end if

            ' Call lifecycle hook before template compilation
            widget.onCreateView()

            ' Generate template
            template = widget.template()

            ' Optional template post-processing hook
            if Rotor.Utils.isFunction(widget.onTemplateCreated)
                widget.onTemplateCreated(template)
            end if

            ' Merge template into config
            if template <> invalid and template.Count() > 0
                templateChildren = template.children
                template.delete("children")
                config = Rotor.Utils.deepExtendAA(config, template)
                config.children = templateChildren
            end if

        end if

        ' =============================================================
        ' LIFECYCLE HOOK REGISTRATION
        ' =============================================================

        ' Register custom lifecycle hooks from config
        if Rotor.Utils.isFunction(config.onMountWidget)
            widget.onMountWidget = config.onMountWidget
        end if

        if Rotor.Utils.isFunction(config.onUpdateWidget)
            widget.onUpdateWidget = config.onUpdateWidget
        end if

        if Rotor.Utils.isFunction(config.onDestroyWidget)
            widget.onDestroyWidget = config.onDestroyWidget
        end if

        ' Queue onRenderSettled callback
        if Rotor.Utils.isFunction(config.onRenderSettled) = true
            m.frameworkInstance.builder.callbackQueue.push({
                callback: config.onRenderSettled,
                callbackScope: widget
            })
            config.delete("onRenderSettled")
        end if

        ' =============================================================
        ' SCENEGRAPH NODE CREATION
        ' =============================================================

        ' Get children for processing
        if config.children = invalid then config.children = {}
        children = config.children

        ' Create SceneGraph node from node pool
        nodeType = Rotor.Utils.isString(config.nodeType) ? config.nodeType : "Group"
        widget.node = m.frameworkInstance.builder.nodePool.acquireNode(nodeType)
        widget.nodeType = nodeType
        widget.markedToAppend = true

        ' Debug: Set node ID for scene graph inspector
        #if debug
            Rotor.Utils.setCustomFields(widget.node, {
                id: `${widget.id}-${widget.HID}`
            }, true, false)
        #end if

        ' =============================================================
        ' PLUGIN INTEGRATION
        ' =============================================================

        ' Process plugins and inject addon methods
        widgetAddon = {}
        pluginKeyList = m.frameworkInstance.builder.pluginAdapter.pluginKeyList
        pluginKeyList.ResetIndex()
        pluginKey = pluginKeyList.GetIndex()

        while pluginKey <> invalid

            if config.doesExist(pluginKey)

                ' Register plugin lifecycle hooks (beforeMount, afterMounted)
                for each LifeCycleHookType in [Rotor.Const.LifeCycleHookType.BEFORE_MOUNT, Rotor.Const.LifeCycleHookType.AFTER_MOUNTED]
                    if m.frameworkInstance.builder.pluginAdapter.pluginHooks[LifeCycleHookType].DoesExist(pluginKey)
                        widget[pluginKey] = config[pluginKey]
                        postProcessBuffer.add({
                            isPlugin: true,
                            widget: widget,
                            hookType: LifeCycleHookType,
                            pluginKey: pluginKey
                        })
                    end if
                end for

                ' Inject plugin widget methods
                plugin = m.frameworkInstance.plugins[pluginKey]
                if Rotor.Utils.isValid(plugin["widgetMethods"])
                    if widgetAddon.plugins = invalid then widgetAddon.plugins = {}
                    if widgetAddon.plugins[pluginKey] = invalid then widgetAddon.plugins[pluginKey] = {
                        pluginKey: pluginKey,
                        id: widget.id,
                        HID: widget.HID,
                        parentHID: widget.parentHID
                    }
                    widgetAddon.plugins[pluginKey].append(plugin["widgetMethods"])
                end if

            end if

            pluginKey = pluginKeyList.GetIndex()
        end while

        ' Append all plugin addon methods to widget
        if widgetAddon.Count() > 0
            widget.append(widgetAddon)
        end if

        ' =============================================================
        ' POST-PROCESS QUEUE
        ' =============================================================

        ' Queue child append operation
        appendChildProcess = {
            hookType: Rotor.Const.LifeCycleHookType.APPEND_CHILD,
            widget: widget
        }
        if config.zIndex <> invalid
            appendChildProcess.zIndex = config.zIndex
        end if
        postProcessBuffer.add(appendChildProcess)

        ' Queue mounted lifecycle hook
        if Rotor.Utils.isFunction(widget.onMountWidget) or widget?.isViewModel = true
            postProcessBuffer.add({
                hookType: Rotor.Const.LifeCycleHookType.MOUNTED,
                widget: widget
            })
        end if

        ' Return widget metadata for tree processing
        return {
            HID: HID,
            children: children,
            parentHID: parentHID,
            id: widget.id
        }

    end function

end namespace
