namespace Rotor

    ' =====================================================================
    ' BasePlugin - Base class for all Rotor Framework plugins
    '
    ' Provides:
    '   - Plugin identification and lifecycle management
    '   - Enable/disable functionality
    '   - Parameter storage
    '
    ' Plugin Types:
    '   - Lifecycle plugins: Implement hooks {} for beforeMount, beforeUpdate, etc.
    '   - Widget method plugins: Implement widgetMethods {} to inject methods
    ' =====================================================================
    class BasePlugin

        ' =============================================================
        ' MEMBER VARIABLES
        ' =============================================================

        isEnabled = true                ' Plugin enabled/disabled flag
        key as string                   ' Plugin identifier (unique key)
        scope as object                 ' Plugin scope (m context in plugin definitions)
        params as object                ' Plugin initialization parameters

        ' Optional plugin features (implemented by subclasses):
        ' hooks as object               ' Widget lifecycle hooks (beforeMount, beforeUpdate, etc.)
        ' widgetMethods as object       ' Methods to inject into widgets

        ' =============================================================
        ' CONSTRUCTOR
        ' =============================================================

        ' ---------------------------------------------------------------------
        ' Constructor - Initializes plugin with key and parameters
        '
        ' @param {string} key - Plugin identifier (auto-generated if empty)
        ' @param {object} params - Plugin initialization parameters
        '
        sub new(key = "" as string, params = invalid as object)
            if key = "" then key = Rotor.Utils.getUUIDHex(8)
            m.params = params
            m.key = key
        end sub

    end class

end namespace
