namespace Rotor

    '******************************************************************
    '** Model (BaseModel)
    '**
    '** Base model class for MVI pattern state management.
    '**
    '** Responsibilities:
    '**   - Holds application state as immutable container
    '**   - Works with Dispatchers and Reducers for state changes
    '**   - Provides cleanup mechanism
    '**
    '** Usage in MVI:
    '**   Model → Holds current state
    '**   Reducer → Creates new state based on intents
    '**   Dispatcher → Routes intents and state updates
    '**
    '** @namespace Rotor
    '******************************************************************
    class Model

        ' =============================================================
        ' MEMBER VARIABLES
        ' =============================================================

        state as object                 ' Application state container

        ' =============================================================
        ' CONSTRUCTOR
        ' =============================================================

        '**
        '** Constructor - Initializes model with optional initial state
        '**
        '** @param {object} state - Initial state object (optional)
        '**
        sub new(state = invalid as object)
            if state <> invalid
                m.state = state
            end if
        end sub

        ' =============================================================
        ' CLEANUP
        ' =============================================================

        '**
        '** destroy - Cleans up model by invalidating state reference
        '**
        sub destroy()
            m.state = invalid
        end sub

    end class

end namespace
