import "../base/BasePlugin.bs"

namespace Rotor

    '==========================================================================
    '** FontStylePlugin
    '**
    '** Rotor Framework plugin for handling dynamic font styling on Label nodes.
    '**
    '** Key Features:
    '**   - Applies font styles specifically to Label nodes
    '**   - Evaluates function-based font style values
    '**   - Interpolates @-prefixed expressions for dynamic font selection
    '**   - Automatically updates font styles on widget lifecycle changes
    '**
    '** Expression Syntax:
    '**   @key.path - Resolves from widget.viewModelState
    '**
    '** Note: Only affects widgets with nodeType = "Label"
    '**
    '** @namespace Rotor
    '** @extends BasePlugin
    '==========================================================================
    class FontStylePlugin extends Rotor.BasePlugin

        ' =============================================================
        ' MEMBER VARIABLES
        ' =============================================================

        ' Regex pattern for matching @-prefixed expressions
        ' Matches: @ followed by any characters except space, @, or comma
        configRegex = /(\@)([^\s\@\,]*)/i

        ' Regex pattern for extracting plugin key prefix (unused but kept for compatibility)
        pluginKeyRegex = /^[^\.]*/i

        ' =============================================================
        ' CONSTRUCTOR
        ' =============================================================

        '----------------------------------------------------------------------
        '** Constructor - Initializes the FontStylePlugin instance
        '**
        '** @param {string} key - Plugin identifier (default: "fontStyle")
        '----------------------------------------------------------------------
        sub new(key = "fontStyle" as string)
            super(key)
        end sub

        ' =============================================================
        ' LIFECYCLE HOOKS
        ' =============================================================

        hooks = {
            '**
            '** beforeMount - Sets font style when widget is mounted
            '**
            '** Evaluates and applies font style after Label widget creation.
            '**
            '** @param {object} scope - Plugin instance (m)
            '** @param {object} widget - Widget being mounted
            '**
            beforeMount: sub(scope as object, widget as object)
                scope.setFontAttribute(widget)
            end sub,

            '**
            '** beforeUpdate - Updates font style when widget config changes
            '**
            '** Re-evaluates and applies font style when fontStyle property changes.
            '**
            '** @param {object} scope - Plugin instance (m)
            '** @param {object} widget - Widget being updated
            '** @param {dynamic} newValue - New font style configuration
            '** @param {dynamic} oldValue - Previous font style configuration
            '**
            beforeUpdate: sub(scope as object, widget as object, newValue, oldValue)
                widget[scope.key] = newValue ?? ""
                scope.setFontAttribute(widget)
            end sub
        }

        ' =============================================================
        ' FONT STYLE PROCESSING
        ' =============================================================

        '**
        '** setFontAttribute - Evaluates and applies font style to Label node
        '**
        '** Processing logic:
        '**   1. Checks if widget is a Label node (only Labels support font styles)
        '**   2. Resolves font style value through function evaluation or interpolation
        '**   3. Applies resolved font style to the node
        '**
        '** Font Style Resolution:
        '**   - Functions are executed in widget scope
        '**   - @-prefixed strings are interpolated from viewModelState
        '**   - Direct strings are used as-is
        '**
        '** @param {object} widget - Widget instance
        '**
        sub setFontAttribute(widget as object)
            ' Font styles only apply to Label nodes
            if widget.nodeType = "Label"
                value = widget[m.key]
                node = widget.node

                ' Step 1: Resolve function-based font style
                if Rotor.Utils.isFunction(value)
                    fontStyle = Rotor.Utils.callbackScoped(value, widget)

                ' Step 2: Process string interpolation
                else if Rotor.Utils.isString(value)
                    results = m.configRegex.MatchAll(value)

                    if results.Count() > 0 and Rotor.Utils.isString(value)
                        for each result in results
                            matchKey = result[2]                ' The key path after @
                            sourceTypeOperator = result[1]      ' The @ symbol

                            ' Determine source based on operator
                            if sourceTypeOperator = "@"
                                source = widget.viewModelState
                            else
                                source = widget
                            end if

                            if source <> invalid
                                ' Resolve font style from key path
                                assetValue = Rotor.Utils.getValueByKeyPath(source, matchKey)

                                ' Handle string vs non-string results
                                if Rotor.Utils.isString(assetValue)
                                    ' String interpolation - replace in original string
                                    replaceRegex = CreateObject("roRegex", sourceTypeOperator + matchKey, "ig")
                                    value = replaceRegex.ReplaceAll(value, assetValue)
                                else
                                    ' Non-string value - replace entire font style
                                    value = assetValue
                                    exit for
                                end if
                            end if
                        end for
                    end if

                    fontStyle = value

                ' Step 3: Direct value assignment
                else
                    fontStyle = value
                end if

                ' Apply font style to the Label node
                Rotor.Utils.setFontAttribute(node, fontStyle)
            end if
        end sub

    end class

end namespace
