import "pkg:/source/rotor/RotorFramework.bs"
import "pkg:/components/tests/widgetTest/WidgetTest.template.bs"
import "pkg:/components/tests/widgetTest/WidgetTest.const.bs"

namespace tests

	@SGNode("widgetTest")
	@suite("Node Pool class")
	class NodePoolClassTests extends rooibos.BaseTestSuite

		pool as object

		protected override sub beforeEach()
			m.pool = new Rotor.ViewBuilder.NodePool()
			m.pool.init({})
		end sub

		'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		@describe("presetNodePool")
		'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		@it("creates a node pool with Rectangle nodes")
		sub _()
			config = {
				nodePool: [{
					nodeType: "Rectangle",
					amount: 2
				}]
			}

			m.pool.presetNodePool(config)

			m.assertTrue(m.pool.pools.doesExist("Rectangle"))
			m.assertEqual(m.pool.pools["Rectangle"].count(), 2)
			m.assertEqual(m.pool.pools["Rectangle"][0].subtype(), "Rectangle")
		end sub

		'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		@describe("acquire & release")
		'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		@it("acquires and releases a Label node")
		sub _()
			config = {
				nodePool: [{
					nodeType: "Label",
					amount: 1
				}, {
					nodeType: "Poster",
					amount: 0
				}]
			}

			m.pool.presetNodePool(config)

			labelNode = m.pool.acquireNode("Label")
			m.assertNotInvalid(labelNode)
			m.assertEqual(labelNode.subtype(), "Label")
			m.pool.releaseNodeBranch(labelNode)

			posterNode = m.pool.acquireNode("Poster")
			m.assertNotInvalid(posterNode)
			m.assertEqual(posterNode.subtype(), "Poster")
			m.pool.releaseNodeBranch(posterNode)

			info = m.pool.getNodePoolInfo()
			m.assertEqual(info.totalAcquiredNodes, 1)
			m.assertEqual(info.totalReleasedNodes, 1)
			m.assertEqual(info.poolFulness["Label"], 1)
		end sub
	end class

end namespace
