import "pkg:/source/RotorFramework.bs"

namespace tests

    @SGNode("i18nTest")
    @suite("I18nService Class Test Suite")
    class I18nServiceClassTests extends rooibos.BaseTestSuite

        i18nService as object

        protected override function beforeEach()
            ' Initialize i18n service
            m.i18nService = new Rotor.ViewBuilder.I18nService()
            m.i18nService.init({
                device: {
                    currentLocale: "en_US"
                }
            })
        end function

        protected override function afterEach()
            m.i18nService.destroy()
            m.i18nService = invalid
        end function

        ' ======================================================================
        ' TEST SUITE 1: Initialization and Locale Management
        ' ======================================================================

        @describe("initialization and locale management")

        @it("initializes with default locale en_US")
        function _()
            ' Given: i18n service is initialized
            ' Then: Default locale should be en_US
            m.assertEqual(m.i18nService.locale, "en_US")
        end function

        @it("allows setting a custom locale")
        function _()
            ' Given: i18n service is initialized
            ' When: Set locale to fr_FR
            m.i18nService.setLocal("fr_FR")

            ' Then: Locale should be fr_FR
            m.assertEqual(m.i18nService.locale, "fr_FR")
        end function

        @it("returns current locale via getLocale")
        function _()
            ' Given: Locale is set to de_DE
            m.i18nService.setLocal("de_DE")

            ' When: Get locale
            result = m.i18nService.getLocale()

            ' Then: Should return the locale
            m.assertEqual(result, "de_DE")
        end function

        @it("initializes RTL as false by default")
        function _()
            ' Given: i18n service is initialized
            ' Then: RTL should be false
            m.assertFalse(m.i18nService.getIsRtl())
        end function

        ' ======================================================================
        ' TEST SUITE 2: L10n Data Management
        ' ======================================================================

        @describe("l10n data management")

        @it("sets l10n data structure")
        function _()
            ' Given: Sample l10n data
            testData = {
                common: {
                    hello: "Hello",
                    goodbye: "Goodbye"
                },
                menu: {
                    home: "Home",
                    settings: "Settings"
                }
            }

            ' When: Set l10n data
            m.i18nService.setL10n(testData)

            ' Then: l10n should contain the data
            m.assertEqual(m.i18nService.l10n.common.hello, "Hello")
            m.assertEqual(m.i18nService.l10n.menu.home, "Home")
        end function

        @it("extends existing l10n data")
        function _()
            ' Given: Initial l10n data
            initialData = {
                common: {
                    hello: "Hello"
                }
            }
            m.i18nService.setL10n(initialData)

            ' When: Extend with additional data
            additionalData = {
                common: {
                    goodbye: "Goodbye"
                },
                menu: {
                    home: "Home"
                }
            }
            m.i18nService.extendL10n(additionalData)

            ' Then: Both old and new data should exist
            m.assertEqual(m.i18nService.l10n.common.hello, "Hello")
            m.assertEqual(m.i18nService.l10n.common.goodbye, "Goodbye")
            m.assertEqual(m.i18nService.l10n.menu.home, "Home")
        end function

        @it("overwrites existing keys when extending")
        function _()
            ' Given: Initial l10n data
            initialData = {
                common: {
                    hello: "Hello"
                }
            }
            m.i18nService.setL10n(initialData)

            ' When: Extend with data that overwrites
            overwriteData = {
                common: {
                    hello: "Bonjour"
                }
            }
            m.i18nService.extendL10n(overwriteData)

            ' Then: Value should be overwritten
            m.assertEqual(m.i18nService.l10n.common.hello, "Bonjour")
        end function

        ' ======================================================================
        ' TEST SUITE 3: Cache Management
        ' ======================================================================

        @describe("cache management")

        @it("clears cache when setting new l10n data")
        function _()
            ' Given: l10n with cached data
            testData = {
                test: {
                    key: "value"
                }
            }
            m.i18nService.setL10n(testData)
            m.i18nService.getAssetByKeyPath("test.key")

            ' When: Set new l10n data
            newData = {
                newTest: {
                    newKey: "newValue"
                }
            }
            m.i18nService.setL10n(newData)

            ' Then: Cache should be cleared
            m.assertEqual(m.i18nService.cache.Count(), 0)
        end function

        @it("refreshes cache when extending l10n")
        function _()
            ' Given: Initial l10n with cache
            initialData = {
                test: {
                    key: "value"
                }
            }
            m.i18nService.setL10n(initialData)

            ' When: Extend l10n
            m.i18nService.extendL10n({ newKey: "newValue" })

            ' Then: Cache should be refreshed (cleared)
            m.assertEqual(m.i18nService.cache.Count(), 0)
        end function

        ' ======================================================================
        ' TEST SUITE 4: getL10n Function
        ' ======================================================================

        @describe("getL10n function")

        @it("returns full l10n object when keyPath is invalid")
        function _()
            ' Given: l10n with test data
            testData = {
                test: {
                    key: "value"
                }
            }
            m.i18nService.setL10n(testData)

            ' When: Call getL10n with invalid keyPath
            result = m.i18nService.getL10n(invalid)

            ' Then: Should return reference to l10n
            m.assertNotInvalid(result)
            m.assertEqual(result.test.key, "value")
        end function

        @it("returns sliced and cloned data by keyPath")
        function _()
            ' Given: l10n with nested data
            testData = {
                common: {
                    greetings: {
                        hello: "Hello",
                        goodbye: "Goodbye"
                    },
                    actions: {
                        save: "Save"
                    }
                }
            }
            m.i18nService.setL10n(testData)

            ' When: Get l10n with keyPath
            result = m.i18nService.getL10n("common.greetings")

            ' Then: Should return sliced data starting from the value of first key
            m.assertNotInvalid(result)
            m.assertTrue(result.DoesExist("greetings"))
            m.assertEqual(result.greetings.hello, "Hello")
            m.assertEqual(result.greetings.goodbye, "Goodbye")
        end function

        ' ======================================================================
        ' TEST SUITE 5: getAssetByKeyPath Function
        ' ======================================================================

        @describe("getAssetByKeyPath function")

        @it("retrieves asset by single keyPath")
        function _()
            ' Given: l10n with test data
            testData = {
                menu: {
                    home: "Home",
                    settings: "Settings"
                }
            }
            m.i18nService.setL10n(testData)

            ' When: Get asset by keyPath
            result = m.i18nService.getAssetByKeyPath("menu")

            ' Then: Should return cloned asset
            m.assertNotInvalid(result)
            m.assertEqual(result.menu.home, "Home")
            m.assertEqual(result.menu.settings, "Settings")
        end function

        @it("retrieves and merges multiple keyPaths")
        function _()
            ' Given: l10n with multiple sections
            testData = {
                common: {
                    hello: "Hello"
                },
                menu: {
                    home: "Home"
                }
            }
            m.i18nService.setL10n(testData)

            ' When: Get asset by multiple keyPaths
            result = m.i18nService.getAssetByKeyPath(["common", "menu"])

            ' Then: Should merge both assets
            m.assertNotInvalid(result)
            m.assertEqual(result.common.hello, "Hello")
            m.assertEqual(result.menu.home, "Home")
        end function

        @it("caches retrieved assets")
        function _()
            ' Given: l10n with test data
            testData = {
                test: {
                    key: "value"
                }
            }
            m.i18nService.setL10n(testData)

            ' When: Get asset by keyPath (first time)
            result1 = m.i18nService.getAssetByKeyPath("test")

            ' Then: Cache should contain the keyPath
            m.assertTrue(m.i18nService.cache.DoesExist("test"))

            ' When: Get asset by same keyPath (second time)
            result2 = m.i18nService.getAssetByKeyPath("test")

            ' Then: Should return cached version
            m.assertEqual(result2.test.key, "value")
        end function

        @it("uses cache for subsequent requests")
        function _()
            ' Given: l10n with test data
            testData = {
                cached: {
                    value: "original"
                }
            }
            m.i18nService.setL10n(testData)

            ' When: First call (populates cache)
            result1 = m.i18nService.getAssetByKeyPath("cached")
            m.assertEqual(result1.cached.value, "original")

            ' Modify l10n directly (cache should still have old value)
            m.i18nService.l10n.cached.value = "modified"

            ' When: Second call (uses cache)
            result2 = m.i18nService.getAssetByKeyPath("cached")

            ' Then: Should return cached (original) value
            m.assertEqual(result2.cached.value, "original")
        end function

        ' ======================================================================
        ' TEST SUITE 6: destroy Function
        ' ======================================================================

        @describe("destroy function")

        @it("clears cache on destroy")
        function _()
            ' Given: l10n with cached data
            testData = {
                test: "value"
            }
            m.i18nService.setL10n(testData)
            m.i18nService.getAssetByKeyPath("test")

            ' When: Destroy service
            m.i18nService.destroy()

            ' Then: Cache should be empty
            m.assertEqual(m.i18nService.cache.Count(), 0)
        end function

        @it("clears l10n data on destroy")
        function _()
            ' Given: l10n with data
            testData = {
                test: "value"
            }
            m.i18nService.setL10n(testData)

            ' When: Destroy service
            m.i18nService.destroy()

            ' Then: l10n should be empty
            m.assertEqual(m.i18nService.l10n.Count(), 0)
        end function

        ' ======================================================================
        ' TEST SUITE 7: Edge Cases
        ' ======================================================================

        @describe("edge cases")

        @it("handles empty l10n data")
        function _()
            ' Given: Empty l10n data
            emptyData = {}

            ' When: Set empty l10n
            m.i18nService.setL10n(emptyData)

            ' Then: Should not crash
            m.assertEqual(m.i18nService.l10n.Count(), 0)
        end function

        @it("handles non-existent keyPath gracefully")
        function _()
            ' Given: l10n with data
            testData = {
                existing: "value"
            }
            m.i18nService.setL10n(testData)

            ' When: Get asset by non-existent keyPath
            result = m.i18nService.getAssetByKeyPath("nonExistent")

            ' Then: Should return empty object (not crash)
            m.assertNotInvalid(result)
        end function

        @it("handles deeply nested keyPaths")
        function _()
            ' Given: Deeply nested l10n data
            deepData = {
                level1: {
                    level2: {
                        level3: {
                            level4: {
                                value: "deep value"
                            }
                        }
                    }
                }
            }
            m.i18nService.setL10n(deepData)

            ' When: Get asset by deep keyPath
            result = m.i18nService.getAssetByKeyPath("level1.level2.level3")

            ' Then: Should retrieve nested data
            m.assertNotInvalid(result)
            m.assertEqual(result.level1.level2.level3.level4.value, "deep value")
        end function

    end class

end namespace
