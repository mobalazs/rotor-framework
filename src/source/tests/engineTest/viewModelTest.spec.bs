import "pkg:/source/rotor/RotorFramework.bs"
import "pkg:/components/tests/viewModelTest/viewModelTest.template.bs"
import "pkg:/components/tests/viewModelTest/viewModelTest.const.bs"

namespace tests

    @SGNode("viewModelTest")
    @suite("ViewModelTestSuite integration")
    class ViewModelTestSuite extends rooibos.BaseTestSuite

        fwInstance as Rotor.Framework

        protected override function beforeEach()
            ' Initialize framework
            m.fwInstance = new Rotor.Framework()
            ' Render
            template = getViewModelTemplate()
            m.fwInstance.render(template)
        end function

        protected override function afterEach()
            m.fwInstance.destroy()
            m.fwInstance = invalid
        end function

        @describe("view model rendering")

        @it("renders view model template with updated props")
        function _()
            viewModelTest = m.fwInstance.getRootWidget().children.viewModelTest
            m.assertNotEqual(viewModelTest, invalid)

            titleNode = m.fwInstance.getWidget("titleLabel").node
            subtitleNode = m.fwInstance.getWidget("subtitleLabel").node
            m.assertNotEqual(titleNode, invalid)
            m.assertNotEqual(subtitleNode, invalid)

            titleNodeText = `${VIEW_MODEL_DEFAULT_PROPS.title} created mounted`
            m.assertEqual(titleNode.text, titleNodeText)
            subtitleNodeText = `${VIEW_MODEL_DEFAULT_PROPS.subtitle} created mounted`
            m.assertEqual(subtitleNode.text, subtitleNodeText)

            ' Update ViewModel with new props (rendering runs synchronously)
            viewModelTest.render({
                props: {
                    title: `${titleNodeText} updated`,
                    subtitle: `${subtitleNodeText} updated`,
                }
            })
            ' Check viewModelState.updateCount value
            ' * One Render was called on Mounted - see template
            ' * Another Render was called in this test
            m.assertEqual(viewModelTest.viewModelState.updateCount, 2)

            ' Validate new texts
            m.assertEqual(titleNode.text, `${titleNodeText} updated`)
            m.assertEqual(subtitleNode.text, `${subtitleNodeText} updated`)

            ' Assert that hint text was populated from viewModelState.foo through the Fields Plugin
            ' ViewModelState properties are accessible through the Fields Plugin using the "@" operator
            hintLabelNode = m.fwInstance.getWidget("hintLabel").node
            m.assertEqual(hintLabelNode.text, viewModelTest.viewModelState.foo)

        end function

        end class
    end namespace
