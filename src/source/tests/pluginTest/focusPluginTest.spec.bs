import "pkg:/source/rotor/RotorFramework.bs"
import "pkg:/source/rotor/engine/constants.bs"
import "pkg:/components/tests/focusPluginTest/focusPluginTest.template.bs"

namespace tests

    @SGNode("focusPluginTest")
    @suite("FocusPluginTestSuite integration")
    class FocusPluginTestSuite extends rooibos.BaseTestSuite

        fwInstance as Rotor.Framework

        protected override function beforeEach()
            ' Initialize framework
            m.fwInstance = new Rotor.Framework()
            ' Render
            template = getFocusTestTemplate()
            m.fwInstance.render(template)
            ' Disable longPress feature
            m.fwInstance.plugins.focus.enableLongPressFeature = false
            ' Set initial focus to L1 (by using the topWidget group and its capturing feature)
            topWidget = m.fwInstance.getWidget("topWidget")
            topWidget.plugins.focus.setFocus()
        end function

        protected override function afterEach()
            m.fwInstance.destroy()
            m.fwInstance = invalid
        end function

        ' ======================================================================
        ' TEST SUITE 1: Initialization and Toggles
        ' ======================================================================

        @describe("initialization and toggles")

        @it("enables focus navigation and validates state")
        function _()
            ' VAlidate initial focus (focus has been set by capturing feature)
            focusedWidget = m.fwInstance.plugins.focus.getFocusedWidget()
            stop
            m.assertEqual(focusedWidget.id, "L1")
            ' Given: Framework is initialized with L1 focused
            l1Widget = m.fwInstance.getWidget("L1")
            m.assertNotInvalid(l1Widget)

            ' Then: Focus navigation should be enabled
            m.assertTrue(l1Widget.plugins.focus.isFocusNavigationEnabled())
        end function

        ' @it("validates initial focus is on L1")
        ' function _()
        '     ' Given: Framework is initialized with initial focus on L1
        '     l1Widget = m.fwInstance.getWidget("L1")

        '     ' Then: Focus should be on L1
        '     focusedWidget = l1Widget.plugins.focus.getFocusedWidget()
        '     m.assertNotInvalid(focusedWidget)
        '     m.assertEqual(focusedWidget.id, "L1")
        '     m.assertTrue(focusedWidget.viewModelState.isFocused)
        ' end function

        ' ' ======================================================================
        ' ' TEST SUITE 2: Directional Navigation (Global)
        ' ' ======================================================================

        ' @describe("directional navigation from L1")

        ' @it("stays on L1 when pressing left (edge of group)")
        ' function _()
        '     ' Given: Focus is on L1 (leftmost in GroupL2)
        '     l1Widget = m.fwInstance.getWidget("L1")

        '     ' When: Press left key (should stay or be captured)
        '     l1Widget.plugins.focus.triggerKeyPress("left")

        '     ' Then: Focus should remain on L1 (no left neighbor)
        '     focusedWidget = l1Widget.plugins.focus.getFocusedWidget()
        '     m.assertNotInvalid(focusedWidget)
        '     m.assertEqual(focusedWidget.id, "L1")
        ' end function

        ' @it("navigates from L1 up (if up direction configured)")
        ' function _()
        '     ' Given: Focus is on L1
        '     l1Widget = m.fwInstance.getWidget("L1")

        '     ' When: Press up key
        '     l1Widget.plugins.focus.triggerKeyPress("up")

        '     ' Then: Focus should move per configuration (test what actually happens)
        '     focusedWidget = l1Widget.plugins.focus.getFocusedWidget()
        '     m.assertNotInvalid(focusedWidget)
        '     ' Note: Adjust expectation based on template configuration
        ' end function

        ' @it("navigates from L1 down (if down direction configured)")
        ' function _()
        '     ' Given: Focus is on L1
        '     l1Widget = m.fwInstance.getWidget("L1")

        '     ' When: Press down key
        '     l1Widget.plugins.focus.triggerKeyPress("down")

        '     ' Then: Focus should move per configuration (test what actually happens)
        '     focusedWidget = l1Widget.plugins.focus.getFocusedWidget()
        '     m.assertNotInvalid(focusedWidget)
        '     ' Note: Adjust expectation based on template configuration
        ' end function

        ' ' ======================================================================
        ' ' TEST SUITE 3: Spatial Navigation Inside Inner Groups
        ' ' ======================================================================

        ' @describe("spatial navigation within GroupL2")

        ' @it("navigates from L1 right to L2")
        ' function _()
        '     ' Given: Focus is on L1 (set in beforeEach)
        '     l1Widget = m.fwInstance.getWidget("L1")

        '     ' When: Press right key
        '     l1Widget.plugins.focus.triggerKeyPress("right")

        '     ' Then: Focus should move to L2
        '     focusedWidget = l1Widget.plugins.focus.getFocusedWidget()
        '     m.assertNotInvalid(focusedWidget)
        '     m.assertEqual(focusedWidget.id, "L2")
        '     m.assertTrue(focusedWidget.viewModelState.isFocused)
        ' end function

        ' @it("navigates from L2 left back to L1")
        ' function _()
        '     ' Given: Focus is moved to L2
        '     l1Widget = m.fwInstance.getWidget("L1")
        '     l1Widget.plugins.focus.setFocus("L2")

        '     ' When: Press left key
        '     l2Widget = m.fwInstance.getWidget("L2")
        '     l2Widget.plugins.focus.triggerKeyPress("left")

        '     ' Then: Focus should move back to L1
        '     focusedWidget = l2Widget.plugins.focus.getFocusedWidget()
        '     m.assertNotInvalid(focusedWidget)
        '     m.assertEqual(focusedWidget.id, "L1")
        '     m.assertTrue(focusedWidget.viewModelState.isFocused)
        ' end function

        ' @describe("spatial navigation within GroupR2")

        ' @it("navigates from R1 right to R2")
        ' function _()
        '     ' Given: Focus is moved to R1
        '     l1Widget = m.fwInstance.getWidget("L1")
        '     l1Widget.plugins.focus.setFocus("R1")

        '     ' When: Press right key
        '     r1Widget = m.fwInstance.getWidget("R1")
        '     r1Widget.plugins.focus.triggerKeyPress("right")

        '     ' Then: Focus should move to R2
        '     focusedWidget = r1Widget.plugins.focus.getFocusedWidget()
        '     m.assertNotInvalid(focusedWidget)
        '     m.assertEqual(focusedWidget.id, "R2")
        '     m.assertTrue(focusedWidget.viewModelState.isFocused)
        ' end function

        ' @it("navigates from R2 left back to R1")
        ' function _()
        '     ' Given: Focus is moved to R2
        '     l1Widget = m.fwInstance.getWidget("L1")
        '     l1Widget.plugins.focus.setFocus("R2")

        '     ' When: Press left key
        '     r2Widget = m.fwInstance.getWidget("R2")
        '     r2Widget.plugins.focus.triggerKeyPress("left")

        '     ' Then: Focus should move back to R1
        '     focusedWidget = r2Widget.plugins.focus.getFocusedWidget()
        '     m.assertNotInvalid(focusedWidget)
        '     m.assertEqual(focusedWidget.id, "R1")
        '     m.assertTrue(focusedWidget.viewModelState.isFocused)
        ' end function

        ' ' ======================================================================
        ' ' TEST SUITE 4: Focus Capturing (Inner Groups)
        ' ' ======================================================================

        ' @describe("focus capturing in GroupL2 with horizontal capture enabled")

        ' @it("captures left key from L1 - stays within GroupL2")
        ' function _()
        '     ' Given: Focus is on L1 (set in beforeEach)
        '     l1Widget = m.fwInstance.getWidget("L1")

        '     ' When: Press left key (should be captured if configured)
        '     l1Widget.plugins.focus.triggerKeyPress("left")

        '     ' Then: Focus should remain on L1 (captured, no exit from group)
        '     focusedWidget = l1Widget.plugins.focus.getFocusedWidget()
        '     m.assertNotInvalid(focusedWidget)
        '     m.assertEqual(focusedWidget.id, "L1")
        ' end function

        ' @it("captures right key from L2 - stays within GroupL2")
        ' function _()
        '     ' Given: Focus is moved to L2
        '     l1Widget = m.fwInstance.getWidget("L1")
        '     l1Widget.plugins.focus.setFocus("L2")

        '     ' When: Press right key (should be captured if configured)
        '     l2Widget = m.fwInstance.getWidget("L2")
        '     l2Widget.plugins.focus.triggerKeyPress("right")

        '     ' Then: Focus should remain on L2
        '     focusedWidget = l2Widget.plugins.focus.getFocusedWidget()
        '     m.assertNotInvalid(focusedWidget)
        '     m.assertEqual(focusedWidget.id, "L2")
        ' end function

        ' @describe("focus capturing in GroupR2 with horizontal capture enabled")

        ' @it("captures left key from R1 - stays within GroupR2")
        ' function _()
        '     ' Given: Focus is moved to R1
        '     l1Widget = m.fwInstance.getWidget("L1")
        '     l1Widget.plugins.focus.setFocus("R1")

        '     ' When: Press left key (should be captured if configured)
        '     r1Widget = m.fwInstance.getWidget("R1")
        '     r1Widget.plugins.focus.triggerKeyPress("left")

        '     ' Then: Focus should remain on R1
        '     focusedWidget = r1Widget.plugins.focus.getFocusedWidget()
        '     m.assertNotInvalid(focusedWidget)
        '     m.assertEqual(focusedWidget.id, "R1")
        ' end function

        ' @it("captures right key from R2 - stays within GroupR2")
        ' function _()
        '     ' Given: Focus is moved to R2
        '     l1Widget = m.fwInstance.getWidget("L1")
        '     l1Widget.plugins.focus.setFocus("R2")

        '     ' When: Press right key (should be captured if configured)
        '     r2Widget = m.fwInstance.getWidget("R2")
        '     r2Widget.plugins.focus.triggerKeyPress("right")

        '     ' Then: Focus should remain on R2
        '     focusedWidget = r2Widget.plugins.focus.getFocusedWidget()
        '     m.assertNotInvalid(focusedWidget)
        '     m.assertEqual(focusedWidget.id, "R2")
        ' end function

        ' ' ======================================================================
        ' ' TEST SUITE 5: Focus Bubbling (Depth 3 to Top)
        ' ' ======================================================================

        ' @describe("focus bubbling from inner groups")

        ' @it("bubbles from L1 up (per group configuration)")
        ' function _()
        '     ' Given: Focus is on L1 (set in beforeEach)
        '     l1Widget = m.fwInstance.getWidget("L1")

        '     ' When: Press up key
        '     l1Widget.plugins.focus.triggerKeyPress("up")

        '     ' Then: Focus should bubble per GroupL2.up configuration
        '     focusedWidget = l1Widget.plugins.focus.getFocusedWidget()
        '     m.assertNotInvalid(focusedWidget)
        '     ' Note: Verify based on actual template configuration
        ' end function

        ' @it("bubbles from L2 up (per group configuration)")
        ' function _()
        '     ' Given: Focus is moved to L2
        '     l1Widget = m.fwInstance.getWidget("L1")
        '     l1Widget.plugins.focus.setFocus("L2")

        '     ' When: Press up key
        '     l2Widget = m.fwInstance.getWidget("L2")
        '     l2Widget.plugins.focus.triggerKeyPress("up")

        '     ' Then: Focus should bubble per GroupL2.up configuration
        '     focusedWidget = l2Widget.plugins.focus.getFocusedWidget()
        '     m.assertNotInvalid(focusedWidget)
        '     ' Note: Verify based on actual template configuration
        ' end function

        ' @it("bubbles from R1 up (per group configuration)")
        ' function _()
        '     ' Given: Focus is moved to R1
        '     l1Widget = m.fwInstance.getWidget("L1")
        '     l1Widget.plugins.focus.setFocus("R1")

        '     ' When: Press up key
        '     r1Widget = m.fwInstance.getWidget("R1")
        '     r1Widget.plugins.focus.triggerKeyPress("up")

        '     ' Then: Focus should bubble per GroupR2.up configuration
        '     focusedWidget = r1Widget.plugins.focus.getFocusedWidget()
        '     m.assertNotInvalid(focusedWidget)
        '     ' Note: Verify based on actual template configuration
        ' end function

        ' @it("bubbles from R2 up (per group configuration)")
        ' function _()
        '     ' Given: Focus is moved to R2
        '     l1Widget = m.fwInstance.getWidget("L1")
        '     l1Widget.plugins.focus.setFocus("R2")

        '     ' When: Press up key
        '     r2Widget = m.fwInstance.getWidget("R2")
        '     r2Widget.plugins.focus.triggerKeyPress("up")

        '     ' Then: Focus should bubble per GroupR2.up configuration
        '     focusedWidget = r2Widget.plugins.focus.getFocusedWidget()
        '     m.assertNotInvalid(focusedWidget)
        '     ' Note: Verify based on actual template configuration
        ' end function

        ' ' ======================================================================
        ' ' TEST SUITE 6: Node Tree Structure Validation
        ' ' ======================================================================

        ' @describe("focus test template produces expected node tree")

        ' @it("creates expected nodes in native tree")
        ' function _()
        '     ' Given: Framework is initialized
        '     rootWidget = m.fwInstance.getRootWidget()
        '     m.assertNotInvalid(rootWidget)

        '     ' Then: Validate topWidget group structure
        '     topWidget = rootWidget.children.topWidget
        '     m.assertNotInvalid(topWidget)
        '     m.assertEqual(topWidget.id, "topWidget")

        '     ' Validate left branch structure (GroupL -> GroupL2 -> L1, L2)
        '     groupL = m.fwInstance.getWidget("GroupL")
        '     m.assertNotInvalid(groupL)
        '     m.assertEqual(groupL.id, "GroupL")

        '     groupL2 = m.fwInstance.getWidget("GroupL2")
        '     m.assertNotInvalid(groupL2)
        '     m.assertEqual(groupL2.id, "GroupL2")

        '     l1 = m.fwInstance.getWidget("L1")
        '     m.assertNotInvalid(l1)
        '     m.assertEqual(l1.id, "L1")
        '     m.assertEqual(l1.node.subtype(), "Rectangle")

        '     l2 = m.fwInstance.getWidget("L2")
        '     m.assertNotInvalid(l2)
        '     m.assertEqual(l2.id, "L2")
        '     m.assertEqual(l2.node.subtype(), "Rectangle")

        '     ' Validate right branch structure (GroupR -> GroupR2 -> R1, R2)
        '     groupR = m.fwInstance.getWidget("GroupR")
        '     m.assertNotInvalid(groupR)
        '     m.assertEqual(groupR.id, "GroupR")

        '     groupR2 = m.fwInstance.getWidget("GroupR2")
        '     m.assertNotInvalid(groupR2)
        '     m.assertEqual(groupR2.id, "GroupR2")

        '     r1 = m.fwInstance.getWidget("R1")
        '     m.assertNotInvalid(r1)
        '     m.assertEqual(r1.id, "R1")
        '     m.assertEqual(r1.node.subtype(), "Rectangle")

        '     r2 = m.fwInstance.getWidget("R2")
        '     m.assertNotInvalid(r2)
        '     m.assertEqual(r2.id, "R2")
        '     m.assertEqual(r2.node.subtype(), "Rectangle")
        ' end function
    end class
end namespace
