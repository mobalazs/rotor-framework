namespace tests
    @suite("Rotor.Utils general helpers")
    class GeneralUtilsSuite extends rooibos.BaseTestSuite

        @describe("type guards")

        @it("isValid distinguishes valid and invalid values")
        function _()
            m.assertTrue(Rotor.Utils.isValid(0))
            m.assertFalse(Rotor.Utils.isValid(invalid))
        end function

        @it("isAssociativeArray reports associative arrays")
        function _()
            m.assertTrue(Rotor.Utils.isAssociativeArray({ key: true }))
            m.assertFalse(Rotor.Utils.isAssociativeArray([1, 2]))
        end function

        @it("isArray reports arrays correctly")
        function _()
            m.assertTrue(Rotor.Utils.isArray([1, 2]))
            m.assertFalse(Rotor.Utils.isArray({}))
        end function

        @it("isString reports string values")
        function _()
            m.assertTrue(Rotor.Utils.isString("hello"))
            m.assertFalse(Rotor.Utils.isString(5))
        end function

        @it("isFunction identifies callable values")
        function _()
            m.assertTrue(Rotor.Utils.isFunction(m.sampleFunction))
            m.assertFalse(Rotor.Utils.isFunction("notFunction"))
        end function

        @it("isInteger accepts integer types")
        function _()
            m.assertTrue(Rotor.Utils.isInteger(5))
            m.assertFalse(Rotor.Utils.isInteger(5.5))
        end function

        @it("isBoolean accepts boolean values")
        function _()
            m.assertTrue(Rotor.Utils.isBoolean(true))
            m.assertFalse(Rotor.Utils.isBoolean(0))
        end function

        @describe("math helpers")

        @it("min returns smallest numeric value")
        function _()
            m.assertEqual(Rotor.Utils.min(4, 9), 4)
        end function

        @it("min returns second argument when first is larger")
        function _()
            m.assertEqual(Rotor.Utils.min(10, 2), 2)
        end function

        @it("max returns largest numeric value")
        function _()
            m.assertEqual(Rotor.Utils.max(4, 9), 9)
        end function

        @it("max returns first argument when already greater")
        function _()
            m.assertEqual(Rotor.Utils.max(9, 4), 9)
        end function

        @it("rotateSegment rotates coordinates around center")
        function _()
            ' Test with π/2 radians (90 degrees) rotation
            piDiv2 = 1.5707963267948966 ' π/2 in radians
            rotated = Rotor.Utils.rotateSegment(0, 0, 1, 0, piDiv2, [0, 0])
            m.assertTrue(Abs(rotated.x1) < 0.0001)
            m.assertTrue(Abs(rotated.y1) < 0.0001)
            m.assertTrue(Abs(rotated.x2) < 0.0001)
            m.assertTrue(Abs(rotated.y2 + 1) < 0.0001)
        end function

        @describe("uuid helpers")

        @it("uuid generates expected id format")
        function _()
            uuid = Rotor.Utils.getUUID()
            m.assertEqual(uuid.Len(), 36)
            m.assertTrue(uuid.Instr("-") > -1)
        end function

        @it("uuidHex produces hex of requested length")
        function _()
            token = Rotor.Utils.getUUIDHex(6)
            m.assertEqual(token.Len(), 6)

            for each char in token.Split("")
                m.assertTrue(m.isHexChar(char))
            end for
        end function

        @describe("RALE logger helpers")

        private function sampleFunction()
            return true
        end function

        private function isHexChar(char as string) as boolean
            return "0123456789ABCDEF".Instr(char) > -1
        end function

    end class
end namespace
