import "pkg:/source/RotorFramework.bs"
import "pkg:/components/tests/dispatcherTest/DispatcherTest.const.bs"
import "pkg:/components/tests/dispatcherTest/DispatcherTest.template.bs"
import "pkg:/components/tests/dispatcherTest/DispatcherTest.dispatcher.bs"

namespace tests

    @SGNode("dispatcherTest")
    @suite("DispatcherRenderThreadTestSuite integration")
    class DispatcherRenderThreadTestSuite extends rooibos.BaseTestSuite

        fwInstance as Rotor.Framework
        fooDispatcher as Rotor.Dispatcher

        protected override function beforeEach()
            ' Initialize framework
            m.fwInstance = new Rotor.Framework()
            ' Create fooDispatcher instance (owned by the render thread)
            test.createFooDispatcher()
            m.fooDispatcher = m.fwInstance.getDispatcher("fooDispatcher")
            ' Render
            template = getDispatcherTestTemplate()
            m.fwInstance.render(template)
        end function

        protected override function afterEach()
            m.fwInstance.destroy()
            m.fwInstance = invalid
            m.fooDispatcher = invalid
        end function

        @describe("render-thread dispatcher propagates state to ancestor view")

        @it("propagates render-thread dispatch to ancestor view")
        function _()
            rootWidget = m.fwInstance.getRootWidget()
            ancestorWidget = m.fwInstance.getWidget("ancestorViewModel")
            descendantWidget = m.fwInstance.getWidget("descendantViewModel")

            hitCounter = m.fooDispatcher.getState().hitCounter
            m.assertEqual(hitCounter, 0)

            m.assertEqual(ancestorWidget.props.foo, "bar")

            descendantWidget.dispatchUpdateFoo("baz") ' Runs synchronously since this is not a cross-thread dispatch
            m.assertEqual(ancestorWidget.props.foo, "baz")

            hitCounter = m.fooDispatcher.getState().hitCounter
            m.assertEqual(hitCounter, 1)

            ' VAlidate dispatch directly + validate middleware
            m.fooDispatcher.dispatch({
                type: IntentTypes.BLOCK_BY_MIDDLEWARE,
                payload: {
                    foo: invalid
                }
            })

            ' state.hitCounter should not change
            hitCounter = m.fooDispatcher.getState().hitCounter
            m.assertEqual(hitCounter, 1, "state.hitCounter should not change when IntentTypes.BLOCK_BY_MIDDLEWARE")

        end function

    end class
end namespace
