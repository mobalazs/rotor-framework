namespace tests
    @suite("Rotor.Utils general helpers")
    class GeneralUtilsSuite extends rooibos.BaseTestSuite

        @describe("type guards")

        @it("isValid detects valid values and invalid")
        function _()
            m.assertTrue(Rotor.Utils.isValid(0))
            m.assertFalse(Rotor.Utils.isValid(invalid))
        end function

        @it("checks for associative arrays")
        function _()
            m.assertTrue(Rotor.Utils.isAssociativeArray({ key: true }))
            m.assertFalse(Rotor.Utils.isAssociativeArray([1, 2]))
        end function

        @it("checks for arrays")
        function _()
            m.assertTrue(Rotor.Utils.isArray([1, 2]))
            m.assertFalse(Rotor.Utils.isArray({}))
        end function

        @it("checks for strings")
        function _()
            m.assertTrue(Rotor.Utils.isString("hello"))
            m.assertFalse(Rotor.Utils.isString(5))
        end function

        @it("checks for function values")
        function _()
            m.assertTrue(Rotor.Utils.isFunction(m.sampleFunction))
            m.assertFalse(Rotor.Utils.isFunction("notFunction"))
        end function

        @it("checks for integers")
        function _()
            m.assertTrue(Rotor.Utils.isInteger(5))
            m.assertFalse(Rotor.Utils.isInteger(5.5))
        end function

        @it("checks for boolean values")
        function _()
            m.assertTrue(Rotor.Utils.isBoolean(true))
            m.assertFalse(Rotor.Utils.isBoolean(0))
        end function

        @describe("math helpers")

        @it("returns min of values")
        function _()
            m.assertEqual(Rotor.Utils.min(4, 9), 4)
        end function

        @it("returns max of values")
        function _()
            m.assertEqual(Rotor.Utils.max(4, 9), 9)
        end function

        @describe("uuid helpers")

        @it("generates uuid with expected format")
        function _()
            uuid = Rotor.Utils.getUUID()
            m.assertEqual(uuid.Len(), 36)
            m.assertTrue(uuid.Instr("-") > -1)
        end function

        @it("generates hex string of requested length")
        function _()
            token = Rotor.Utils.getUUIDHex(6)
            m.assertEqual(token.Len(), 6)

            for each char in token.Split("")
                m.assertTrue(m.isHexChar(char))
            end for
        end function

        @describe("RALE logger helpers")

        @it("pads numbers with leading zeros")
        function _()
            m.assertEqual(Rotor.Utils.RALE_Logger__getZeroNumber(5), "05")
            m.assertEqual(Rotor.Utils.RALE_Logger__getZeroNumber(123), "123")
        end function

        @it("formats time using roDateTime")
        function _()
            dt = m.createDateTime("2024-06-02T03:04:05Z")
            formatted = Rotor.Utils.RALE_Logger__GetTime(dt)
            m.assertEqual(formatted, "03:04:05.00")
        end function

        @it("formats date using roDateTime")
        function _()
            dt = m.createDateTime("2024-06-02T00:00:00Z")
            formatted = Rotor.Utils.RALE_Logger__GetDate(dt)
            m.assertEqual(formatted, "06-02")
        end function

        private function sampleFunction()
            return true
        end function

        private function isHexChar(char as string) as boolean
            return "0123456789ABCDEF".Instr(char) > -1
        end function

        private function createDateTime(isoString as string) as object
            dt = CreateObject("roDateTime")
            dt.FromISO8601String(isoString)
            return dt
        end function
    end class
end namespace
