import "pkg:/source/rotor/RotorFramework.bs"
import "pkg:/components/tests/ActiveTestNode_const.bs"

namespace tests

    ' @sgnode("Scene")
    @suite("HelloWorldRenderSuite integration")
    class HelloTestSuite extends rooibos.BaseTestSuite

        activeNode = invalid

        protected override function beforeEach()
            m.activeNode = m.top.createChild("ActiveTestNode")
            m.activeNode@.renderTest("helloTest")
        end function

        protected override function afterEach()
            m.activeNode@.destroy()
            if m.scene <> invalid
                m.scene.removeChild(m.activeNode)
            end if
            m.activeNode = invalid
        end function

        @describe("hello world renderer")

        @it("creates expected nodes in native tree")
        function _()
            rootNode = m.activeNode@.getRootNode()

            m.assertNotEqual(rootNode, invalid)
            helloGroup = m.activeNode.getChild(0)

            m.assertNotEqual(helloGroup, invalid)
            m.assertEqual(CDbl(helloGroup.translation[0]), CDbl(SAFE_AREA.x))
            m.assertEqual(CDbl(helloGroup.translation[1]), CDbl(SAFE_AREA.y))

            helloRect = helloGroup.getChild(0)
            m.assertNotEqual(helloRect, invalid)
            m.assertEqual(helloRect.subtype(), "Rectangle")
            m.assertEqual(helloRect.height, CDbl(HELLO_WORLD_CONFIG.RectHeight))
            m.assertEqual(helloRect.color, &h202020FF)
            m.assertEqual(helloRect.width, 0.0)

            helloLabel = helloRect.getChild(0)
            m.assertNotEqual(helloLabel, invalid)
            m.assertEqual(helloLabel.subtype(), "Label")
            m.assertEqual(helloLabel.text, HELLO_WORLD_TEXT)
            m.assertEqual(helloLabel.horizAlign, "center")
            m.assertEqual(helloLabel.vertAlign, "center")
            m.assertEqual(helloLabel.translation[0], CDbl(HELLO_WORLD_CONFIG.PaddingX))
            m.assertEqual(helloLabel.height, CDbl(HELLO_WORLD_CONFIG.RectHeight))
        end function

        @it("auto sizes nodes after render tracking fires")
        function _()
            ' Get widgets
            labelWidget = m.activeNode@.getWidget("helloLabel")
            m.assertNotEqual(labelWidget, invalid)
            rectWidget = m.activeNode@.getWidget("helloRect")
            m.assertNotEqual(rectWidget, invalid)

            ' Get nodes
            labelNode = labelWidget.node
            m.assertNotEqual(labelNode, invalid)
            rectNode = rectWidget.node
            m.assertNotEqual(rectNode, invalid)

            ' Note that template rendering works synchronously.
            ' Verify the effect of renderTracking observer callbacks:
            m.assertAsyncField(rectNode, "width", 90)
            m.assertTrue(rectNode.width >= labelNode.width, "Rectangle width should cover label width")

        end function
    end class
end namespace
