import "pkg:/source/rotor/RotorFramework.bs"

namespace tests
    const HELLO_WORLD_TEXT = "Hello World!"
    const SAFE_AREA = { x: 90, y: 60 }
    const HELLO_WORLD_CONFIG = {
        PaddingX: 32,
        RectHeight: 110
    }

    function createHelloWorldPayload() as object
        autoSizeObserver = sub(payload as object) typecast m as Rotor.Widget
            labelNode = m.node
            rectNode = m.parent.node

            textBounds = labelNode.localBoundingRect()
            textWidth = textBounds.width

            rectNode.width = textWidth + (HELLO_WORLD_CONFIG.PaddingX * 2)
            labelNode.width = textWidth
        end sub

        return {
            id: "helloWorldSample",
            nodeType: "Group",
            fields: {
                translation: [SAFE_AREA.x, SAFE_AREA.y]
            },
            children: [{
                id: "helloRect",
                nodeType: "Rectangle",
                fields: {
                    width: 0,
                    height: HELLO_WORLD_CONFIG.RectHeight,
                    color: "0x202020FF"
                },
                children: {
                    id: "helloLabel",
                    nodeType: "Label",
                    fields: {
                        enableRenderTracking: true,
                        text: HELLO_WORLD_TEXT,
                        horizAlign: "center",
                        vertAlign: "center",
                        translation: [HELLO_WORLD_CONFIG.PaddingX, 0],
                        width: 0,
                        height: HELLO_WORLD_CONFIG.RectHeight
                    },
                    observer: [{
                        fieldId: "renderTracking",
                        callback: autoSizeObserver
                    }]
                }
            }]
        }
    end function

    @suite("HelloWorldRenderSuite integration")
    class HelloWorldRenderSuite extends rooibos.BaseTestSuite

        framework = invalid

        protected override function beforeEach()
            m.framework = new Rotor.Framework()
        end function

        protected override function afterEach()
            if m.framework <> invalid
                m.framework.destroy()
                m.framework = invalid
            end if
        end function

        private sub renderHelloWorld()
            payload = createHelloWorldPayload()
            m.framework.render(payload)
        end sub

        @describe("hello world renderer")

        @it("creates expected nodes in native tree")
        function _()
            m.renderHelloWorld()

            rootNode = m.framework.getRootNode()
            m.assertNotEqual(rootNode, invalid)
            groupNode = rootNode.getChild(3)
            m.assertNotEqual(groupNode, invalid)

            m.assertEqual(CDbl(groupNode.translation[0]), CDbl(SAFE_AREA.x))
            m.assertEqual(CDbl(groupNode.translation[1]), CDbl(SAFE_AREA.y))
            rectNode = groupNode.getChild(0)
            m.assertNotEqual(rectNode, invalid)
            m.assertEqual(rectNode.subtype(), "Rectangle")
            m.assertEqual(rectNode.height, CDbl(HELLO_WORLD_CONFIG.RectHeight))
            m.assertEqual(rectNode.color, &h202020FF)
            m.assertEqual(rectNode.width, 0.0)

            labelNode = rectNode.getChild(0)
            m.assertNotEqual(labelNode, invalid)
            m.assertEqual(labelNode.subtype(), "Label")
            m.assertEqual(labelNode.text, HELLO_WORLD_TEXT)
            m.assertEqual(labelNode.horizAlign, "center")
            m.assertEqual(labelNode.vertAlign, "center")
            m.assertEqual(labelNode.translation[0], CDbl(HELLO_WORLD_CONFIG.PaddingX))
            m.assertEqual(labelNode.height, CDbl(HELLO_WORLD_CONFIG.RectHeight))
        end function

        @it("registers render tracking observer for widget")
        function _()
            m.renderHelloWorld()

            labelWidget = m.framework.getWidget("helloLabel")
            m.assertNotEqual(labelWidget, invalid)

            observersConfig = labelWidget.observer
            m.assertNotEqual(observersConfig, invalid)
            observerList = Rotor.Utils.ensureArray(observersConfig)
            m.assertArrayCount(observerList, 1)
            trackingConfig = observerList[0]
            m.assertEqual(trackingConfig.fieldId, "renderTracking")
            m.assertNotEqual(trackingConfig.callback, invalid)
        end function
    end class
end namespace
