namespace tests

  @suite("ViewBuilder")
  class ViewBuilderTests extends tests.BaseTestSuite

    private framework
    private builder
    private processorStub
    private postProcessorStub
    private postProcessBufferStub

    protected override sub beforeEach()
      super.beforeEach()

      m.framework = {
        enableRendering: true,
        plugins: {}
      }

      m.builder = new Rotor.ViewBuilder.Builder()
      m.framework.builder = m.builder
      m.builder.frameworkInstance = m.framework

      m.processorStub = {
        calls: [],
        run: sub(postProcessBuffer as object, parentHID as string, payload as dynamic, params = {} as object)
          m.calls.push({
            postProcessBuffer: postProcessBuffer,
            parentHID: parentHID,
            payload: payload,
            params: params
          })
        end sub
      }

      m.postProcessorStub = {
        calls: 0,
        run: sub(postProcessBuffer as object)
          m.calls = m.calls + 1
        end sub
      }

      m.postProcessBufferStub = {
        clearLifeCycleBuffersCalled: 0,
        clearLifeCycleBuffers: sub()
          m.clearLifeCycleBuffersCalled = m.clearLifeCycleBuffersCalled + 1
        end sub
      }

      m.builder.processor = m.processorStub
      m.builder.postProcessor = m.postProcessorStub
      m.builder.postProcessBuffer = m.postProcessBufferStub

      m.builder.renderQueue = []
      m.builder.callbackQueue = []
    end sub

    '----------------------------------------------------------
    @it("queues payloads when render is already processing")
    '----------------------------------------------------------
    sub queuesPayloadWhenBusy()
      m.builder.isRenderProcessing = true

      payload = { id: "widget-1" }
      m.builder.render(payload)

      m.assertEqual(m.builder.renderQueue.count(), 1)
      queued = m.builder.renderQueue[0]
      m.assertTrue(queued.payload = payload)
    end sub

    '----------------------------------------------------------
    @it("flushes queued renders through the processor")
    '----------------------------------------------------------
    sub flushesQueuedRenders()
      payload = { id: "queued-widget" }
      params = { key: "value" }

      m.builder.renderQueue.push({
        payload: payload,
        params: params
      })

      m.processorStub.calls = []

      m.framework.enableRendering = false
      m.builder.renderQueueFlush()

      m.assertTrue(m.framework.enableRendering)
      m.assertEqual(m.builder.renderQueue.count(), 0)
      m.assertEqual(m.processorStub.calls.count(), 1)

      recordedCall = m.processorStub.calls[0]
      m.assertTrue(recordedCall.payload = payload)
      m.assertTrue(recordedCall.params = params)
    end sub

    '----------------------------------------------------------
    @it("runs callbacks after render completes")
    '----------------------------------------------------------
    sub runsCallbacksAfterRender()
      callbackTracker = { called: false }
      callback = sub()
        callbackTracker.called = true
      end sub

      m.builder.render({ id: "widget-with-callback" }, { callback: callback })

      m.assertEqual(m.processorStub.calls.count(), 1)
      m.assertEqual(m.postProcessorStub.calls, 1)
      m.assertEqual(m.postProcessBufferStub.clearLifeCycleBuffersCalled, 1)
      m.assertTrue(callbackTracker.called)
      m.assertEqual(m.builder.callbackQueue.count(), 0)
    end sub

  end class
end namespace
